
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSErightMULASSIGNDIVASSIGNSUBASSIGNADDASSIGNnonassoc<>GEQLEQEQNEQleft+-leftDOTADDDOTSUBleft*/leftDOTMULDOTDIVrightUMINUSleft\'ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOAT FOR GEQ ID IF INTNUM LEQ MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSstart :\n            | instructions instructions : instruction\n                    | instructions instructionbreak : BREAKcontinue : CONTINUE instruction : instruction_if\n                | instruction_for\n                | instruction_while\n                | instruction_return \';\'\n                | instruction_assign \';\'\n                | instruction_print \';\'\n                | break \';\'\n                | continue \';\'  instruction : \'{\' instructions \'}\'  instruction_return : RETURN\n                        | RETURN expr instruction_print : PRINT printables printables : printable\n                | printables \',\' printablestr : STRING printable : expr\n                | str instruction_assign : assignable \'=\' expr\n                        | assignable ADDASSIGN expr\n                        | assignable SUBASSIGN expr\n                        | assignable MULASSIGN expr\n                        | assignable DIVASSIGN exprid : ID assignable : id\n                    | matrix_element\n                    | vector_element matrix_element : id "[" INTNUM "," INTNUM "]"  vector_element : id "[" INTNUM "]" expr : expr \'\\\'\'expr : \'(\' expr \')\'expr : matrix_function \'(\' expr \')\'expr : assignable\n            | matrixexpr : "-" expr %prec UMINUSexpr : INTNUMexpr : FLOATexpr : expr \'+\' expr\n            | expr \'-\' expr\n            | expr \'*\' expr\n            | expr \'/\' expr\n            | expr DOTADD expr\n            | expr DOTSUB expr\n            | expr DOTMUL expr\n            | expr DOTDIV expr\n            | expr \'>\' expr\n            | expr \'<\' expr\n            | expr EQ expr\n            | expr NEQ expr\n            | expr LEQ expr\n            | expr GEQ expr\n     matrix_function : ZEROS\n                            | ONES\n                            | EYE instruction_if : IF \'(\' expr \')\' instruction %prec IFX\n                    | IF \'(\' expr \')\' instruction ELSE instruction instruction_for : FOR id \'=\' expr \':\' expr instruction instruction_while : WHILE \'(\' expr \')\' instruction matrix : \'[\' vectors \']\'vectors : vectors \',\' vector\n               | vector vector : \'[\' variables \']\' variables : variables \',\' variable\n                 | variable variable : INTNUM\n                | FLOAT\n                | assignable '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,25,26,27,28,29,30,58,119,122,131,132,],[-1,0,-2,-3,-7,-8,-9,-4,-10,-11,-12,-13,-14,-15,-60,-63,-61,-62,]),'{':([0,2,3,4,5,6,12,15,22,23,24,25,26,27,28,29,30,31,39,40,42,43,58,63,80,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,119,122,123,127,128,129,131,132,],[12,12,-3,-7,-8,-9,12,-30,-31,-32,-29,-4,-10,-11,-12,-13,-14,12,-38,-39,-41,-42,-15,-35,-40,12,-34,12,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-36,-64,-60,-63,-37,12,12,-33,-61,-62,]),'IF':([0,2,3,4,5,6,12,15,22,23,24,25,26,27,28,29,30,31,39,40,42,43,58,63,80,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,119,122,123,127,128,129,131,132,],[13,13,-3,-7,-8,-9,13,-30,-31,-32,-29,-4,-10,-11,-12,-13,-14,13,-38,-39,-41,-42,-15,-35,-40,13,-34,13,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-36,-64,-60,-63,-37,13,13,-33,-61,-62,]),'FOR':([0,2,3,4,5,6,12,15,22,23,24,25,26,27,28,29,30,31,39,40,42,43,58,63,80,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,119,122,123,127,128,129,131,132,],[14,14,-3,-7,-8,-9,14,-30,-31,-32,-29,-4,-10,-11,-12,-13,-14,14,-38,-39,-41,-42,-15,-35,-40,14,-34,14,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-36,-64,-60,-63,-37,14,14,-33,-61,-62,]),'WHILE':([0,2,3,4,5,6,12,15,22,23,24,25,26,27,28,29,30,31,39,40,42,43,58,63,80,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,119,122,123,127,128,129,131,132,],[16,16,-3,-7,-8,-9,16,-30,-31,-32,-29,-4,-10,-11,-12,-13,-14,16,-38,-39,-41,-42,-15,-35,-40,16,-34,16,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-36,-64,-60,-63,-37,16,16,-33,-61,-62,]),'RETURN':([0,2,3,4,5,6,12,15,22,23,24,25,26,27,28,29,30,31,39,40,42,43,58,63,80,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,119,122,123,127,128,129,131,132,],[17,17,-3,-7,-8,-9,17,-30,-31,-32,-29,-4,-10,-11,-12,-13,-14,17,-38,-39,-41,-42,-15,-35,-40,17,-34,17,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-36,-64,-60,-63,-37,17,17,-33,-61,-62,]),'PRINT':([0,2,3,4,5,6,12,15,22,23,24,25,26,27,28,29,30,31,39,40,42,43,58,63,80,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,119,122,123,127,128,129,131,132,],[19,19,-3,-7,-8,-9,19,-30,-31,-32,-29,-4,-10,-11,-12,-13,-14,19,-38,-39,-41,-42,-15,-35,-40,19,-34,19,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-36,-64,-60,-63,-37,19,19,-33,-61,-62,]),'BREAK':([0,2,3,4,5,6,12,15,22,23,24,25,26,27,28,29,30,31,39,40,42,43,58,63,80,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,119,122,123,127,128,129,131,132,],[20,20,-3,-7,-8,-9,20,-30,-31,-32,-29,-4,-10,-11,-12,-13,-14,20,-38,-39,-41,-42,-15,-35,-40,20,-34,20,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-36,-64,-60,-63,-37,20,20,-33,-61,-62,]),'CONTINUE':([0,2,3,4,5,6,12,15,22,23,24,25,26,27,28,29,30,31,39,40,42,43,58,63,80,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,119,122,123,127,128,129,131,132,],[21,21,-3,-7,-8,-9,21,-30,-31,-32,-29,-4,-10,-11,-12,-13,-14,21,-38,-39,-41,-42,-15,-35,-40,21,-34,21,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-36,-64,-60,-63,-37,21,21,-33,-61,-62,]),'ID':([0,2,3,4,5,6,12,14,15,17,19,22,23,24,25,26,27,28,29,30,31,32,35,37,39,40,41,42,43,48,49,50,51,52,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,89,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,119,120,122,123,125,127,128,129,131,132,],[24,24,-3,-7,-8,-9,24,24,-30,24,24,-31,-32,-29,-4,-10,-11,-12,-13,-14,24,24,24,24,-38,-39,24,-41,-42,24,24,24,24,24,-15,24,-35,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-40,24,24,24,-34,24,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-36,-64,-60,24,-63,-37,24,24,24,-33,-61,-62,]),'}':([3,4,5,6,25,26,27,28,29,30,31,58,119,122,131,132,],[-3,-7,-8,-9,-4,-10,-11,-12,-13,-14,58,-15,-60,-63,-61,-62,]),'ELSE':([4,5,6,26,27,28,29,30,58,119,122,131,132,],[-7,-8,-9,-10,-11,-12,-13,-14,-15,127,-63,-61,-62,]),';':([7,8,9,10,11,15,17,20,21,22,23,24,36,39,40,42,43,53,54,55,56,57,63,80,84,85,86,87,88,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,118,123,129,],[26,27,28,29,30,-30,-16,-5,-6,-31,-32,-29,-17,-38,-39,-41,-42,-18,-19,-22,-23,-21,-35,-40,-24,-25,-26,-27,-28,-34,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-36,-64,-20,-37,-33,]),'(':([13,16,17,19,32,35,37,38,41,44,45,46,48,49,50,51,52,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,89,120,],[32,35,37,37,37,37,37,79,37,-57,-58,-59,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'=':([15,18,22,23,24,33,93,129,],[-30,48,-31,-32,-29,60,-34,-33,]),'ADDASSIGN':([15,18,22,23,24,93,129,],[-30,49,-31,-32,-29,-34,-33,]),'SUBASSIGN':([15,18,22,23,24,93,129,],[-30,50,-31,-32,-29,-34,-33,]),'MULASSIGN':([15,18,22,23,24,93,129,],[-30,51,-31,-32,-29,-34,-33,]),'DIVASSIGN':([15,18,22,23,24,93,129,],[-30,52,-31,-32,-29,-34,-33,]),"'":([15,22,23,24,36,39,40,42,43,55,59,62,63,78,80,84,85,86,87,88,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,128,129,],[-30,-31,-32,-29,63,-38,-39,-41,-42,63,63,63,-35,63,63,63,63,63,63,63,63,-34,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-36,63,-64,-37,63,-33,]),'+':([15,22,23,24,36,39,40,42,43,55,59,62,63,78,80,84,85,86,87,88,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,128,129,],[-30,-31,-32,-29,64,-38,-39,-41,-42,64,64,64,-35,64,-40,64,64,64,64,64,64,-34,-43,-44,-45,-46,-47,-48,-49,-50,64,64,64,64,64,64,-36,64,-64,-37,64,-33,]),'-':([15,17,19,22,23,24,32,35,36,37,39,40,41,42,43,48,49,50,51,52,55,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,85,86,87,88,89,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,120,123,128,129,],[-30,41,41,-31,-32,-29,41,41,65,41,-38,-39,41,-41,-42,41,41,41,41,41,65,65,41,65,-35,41,41,41,41,41,41,41,41,41,41,41,41,41,41,65,41,-40,65,65,65,65,65,41,65,-34,-43,-44,-45,-46,-47,-48,-49,-50,65,65,65,65,65,65,-36,65,-64,41,-37,65,-33,]),'*':([15,22,23,24,36,39,40,42,43,55,59,62,63,78,80,84,85,86,87,88,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,128,129,],[-30,-31,-32,-29,66,-38,-39,-41,-42,66,66,66,-35,66,-40,66,66,66,66,66,66,-34,66,66,-45,-46,66,66,-49,-50,66,66,66,66,66,66,-36,66,-64,-37,66,-33,]),'/':([15,22,23,24,36,39,40,42,43,55,59,62,63,78,80,84,85,86,87,88,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,128,129,],[-30,-31,-32,-29,67,-38,-39,-41,-42,67,67,67,-35,67,-40,67,67,67,67,67,67,-34,67,67,-45,-46,67,67,-49,-50,67,67,67,67,67,67,-36,67,-64,-37,67,-33,]),'DOTADD':([15,22,23,24,36,39,40,42,43,55,59,62,63,78,80,84,85,86,87,88,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,128,129,],[-30,-31,-32,-29,68,-38,-39,-41,-42,68,68,68,-35,68,-40,68,68,68,68,68,68,-34,68,68,-45,-46,-47,-48,-49,-50,68,68,68,68,68,68,-36,68,-64,-37,68,-33,]),'DOTSUB':([15,22,23,24,36,39,40,42,43,55,59,62,63,78,80,84,85,86,87,88,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,128,129,],[-30,-31,-32,-29,69,-38,-39,-41,-42,69,69,69,-35,69,-40,69,69,69,69,69,69,-34,69,69,-45,-46,-47,-48,-49,-50,69,69,69,69,69,69,-36,69,-64,-37,69,-33,]),'DOTMUL':([15,22,23,24,36,39,40,42,43,55,59,62,63,78,80,84,85,86,87,88,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,128,129,],[-30,-31,-32,-29,70,-38,-39,-41,-42,70,70,70,-35,70,-40,70,70,70,70,70,70,-34,70,70,70,70,70,70,-49,-50,70,70,70,70,70,70,-36,70,-64,-37,70,-33,]),'DOTDIV':([15,22,23,24,36,39,40,42,43,55,59,62,63,78,80,84,85,86,87,88,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,128,129,],[-30,-31,-32,-29,71,-38,-39,-41,-42,71,71,71,-35,71,-40,71,71,71,71,71,71,-34,71,71,71,71,71,71,-49,-50,71,71,71,71,71,71,-36,71,-64,-37,71,-33,]),'>':([15,22,23,24,36,39,40,42,43,55,59,62,63,78,80,84,85,86,87,88,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,128,129,],[-30,-31,-32,-29,72,-38,-39,-41,-42,72,72,72,-35,72,-40,72,72,72,72,72,72,-34,-43,-44,-45,-46,-47,-48,-49,-50,None,None,None,None,None,None,-36,72,-64,-37,72,-33,]),'<':([15,22,23,24,36,39,40,42,43,55,59,62,63,78,80,84,85,86,87,88,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,128,129,],[-30,-31,-32,-29,73,-38,-39,-41,-42,73,73,73,-35,73,-40,73,73,73,73,73,73,-34,-43,-44,-45,-46,-47,-48,-49,-50,None,None,None,None,None,None,-36,73,-64,-37,73,-33,]),'EQ':([15,22,23,24,36,39,40,42,43,55,59,62,63,78,80,84,85,86,87,88,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,128,129,],[-30,-31,-32,-29,74,-38,-39,-41,-42,74,74,74,-35,74,-40,74,74,74,74,74,74,-34,-43,-44,-45,-46,-47,-48,-49,-50,None,None,None,None,None,None,-36,74,-64,-37,74,-33,]),'NEQ':([15,22,23,24,36,39,40,42,43,55,59,62,63,78,80,84,85,86,87,88,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,128,129,],[-30,-31,-32,-29,75,-38,-39,-41,-42,75,75,75,-35,75,-40,75,75,75,75,75,75,-34,-43,-44,-45,-46,-47,-48,-49,-50,None,None,None,None,None,None,-36,75,-64,-37,75,-33,]),'LEQ':([15,22,23,24,36,39,40,42,43,55,59,62,63,78,80,84,85,86,87,88,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,128,129,],[-30,-31,-32,-29,76,-38,-39,-41,-42,76,76,76,-35,76,-40,76,76,76,76,76,76,-34,-43,-44,-45,-46,-47,-48,-49,-50,None,None,None,None,None,None,-36,76,-64,-37,76,-33,]),'GEQ':([15,22,23,24,36,39,40,42,43,55,59,62,63,78,80,84,85,86,87,88,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,128,129,],[-30,-31,-32,-29,77,-38,-39,-41,-42,77,77,77,-35,77,-40,77,77,77,77,77,77,-34,-43,-44,-45,-46,-47,-48,-49,-50,None,None,None,None,None,None,-36,77,-64,-37,77,-33,]),',':([15,22,23,24,39,40,42,43,53,54,55,56,57,61,63,80,82,83,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,116,118,123,124,126,129,130,],[-30,-31,-32,-29,-38,-39,-41,-42,89,-19,-22,-23,-21,92,-35,-40,117,-66,-34,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-36,125,-69,-70,-71,-72,-64,-20,-37,-67,-65,-33,-68,]),')':([15,22,23,24,39,40,42,43,59,62,63,78,80,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,123,129,],[-30,-31,-32,-29,-38,-39,-41,-42,90,94,-35,109,-40,-34,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-36,123,-64,-37,-33,]),':':([15,22,23,24,39,40,42,43,63,80,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,123,129,],[-30,-31,-32,-29,-38,-39,-41,-42,-35,-40,120,-34,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-36,-64,-37,-33,]),']':([15,22,23,24,61,82,83,93,111,112,113,114,115,121,124,126,129,130,],[-30,-31,-32,-29,93,116,-66,-34,124,-69,-70,-71,-72,129,-67,-65,-33,-68,]),'[':([15,17,19,24,32,35,37,41,47,48,49,50,51,52,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,89,117,120,],[34,47,47,-29,47,47,47,47,81,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,81,47,]),'INTNUM':([17,19,32,34,35,37,41,48,49,50,51,52,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,89,92,120,125,],[42,42,42,61,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,113,42,121,42,113,]),'FLOAT':([17,19,32,35,37,41,48,49,50,51,52,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,89,120,125,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,114,43,43,114,]),'ZEROS':([17,19,32,35,37,41,48,49,50,51,52,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,89,120,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'ONES':([17,19,32,35,37,41,48,49,50,51,52,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,89,120,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'EYE':([17,19,32,35,37,41,48,49,50,51,52,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,89,120,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'STRING':([19,89,],[57,57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'instructions':([0,12,],[2,31,]),'instruction':([0,2,12,31,90,94,127,128,],[3,25,3,25,119,122,131,132,]),'instruction_if':([0,2,12,31,90,94,127,128,],[4,4,4,4,4,4,4,4,]),'instruction_for':([0,2,12,31,90,94,127,128,],[5,5,5,5,5,5,5,5,]),'instruction_while':([0,2,12,31,90,94,127,128,],[6,6,6,6,6,6,6,6,]),'instruction_return':([0,2,12,31,90,94,127,128,],[7,7,7,7,7,7,7,7,]),'instruction_assign':([0,2,12,31,90,94,127,128,],[8,8,8,8,8,8,8,8,]),'instruction_print':([0,2,12,31,90,94,127,128,],[9,9,9,9,9,9,9,9,]),'break':([0,2,12,31,90,94,127,128,],[10,10,10,10,10,10,10,10,]),'continue':([0,2,12,31,90,94,127,128,],[11,11,11,11,11,11,11,11,]),'id':([0,2,12,14,17,19,31,32,35,37,41,48,49,50,51,52,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,89,90,94,120,125,127,128,],[15,15,15,33,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'assignable':([0,2,12,17,19,31,32,35,37,41,48,49,50,51,52,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,89,90,94,120,125,127,128,],[18,18,18,39,39,18,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,115,39,18,18,39,115,18,18,]),'matrix_element':([0,2,12,17,19,31,32,35,37,41,48,49,50,51,52,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,89,90,94,120,125,127,128,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'vector_element':([0,2,12,17,19,31,32,35,37,41,48,49,50,51,52,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,89,90,94,120,125,127,128,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'expr':([17,19,32,35,37,41,48,49,50,51,52,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,89,120,],[36,55,59,62,78,80,84,85,86,87,88,91,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,55,128,]),'matrix_function':([17,19,32,35,37,41,48,49,50,51,52,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,89,120,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'matrix':([17,19,32,35,37,41,48,49,50,51,52,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,89,120,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'printables':([19,],[53,]),'printable':([19,89,],[54,118,]),'str':([19,89,],[56,56,]),'vectors':([47,],[82,]),'vector':([47,117,],[83,126,]),'variables':([81,],[111,]),'variable':([81,125,],[112,130,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> <empty>','start',0,'p_start','Mparser.py',28),
  ('start -> instructions','start',1,'p_start','Mparser.py',29),
  ('instructions -> instruction','instructions',1,'p_instructions','Mparser.py',34),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',35),
  ('break -> BREAK','break',1,'p_break','Mparser.py',40),
  ('continue -> CONTINUE','continue',1,'p_continue','Mparser.py',45),
  ('instruction -> instruction_if','instruction',1,'p_instruction','Mparser.py',50),
  ('instruction -> instruction_for','instruction',1,'p_instruction','Mparser.py',51),
  ('instruction -> instruction_while','instruction',1,'p_instruction','Mparser.py',52),
  ('instruction -> instruction_return ;','instruction',2,'p_instruction','Mparser.py',53),
  ('instruction -> instruction_assign ;','instruction',2,'p_instruction','Mparser.py',54),
  ('instruction -> instruction_print ;','instruction',2,'p_instruction','Mparser.py',55),
  ('instruction -> break ;','instruction',2,'p_instruction','Mparser.py',56),
  ('instruction -> continue ;','instruction',2,'p_instruction','Mparser.py',57),
  ('instruction -> { instructions }','instruction',3,'p_scope','Mparser.py',62),
  ('instruction_return -> RETURN','instruction_return',1,'p_instruction_return','Mparser.py',67),
  ('instruction_return -> RETURN expr','instruction_return',2,'p_instruction_return','Mparser.py',68),
  ('instruction_print -> PRINT printables','instruction_print',2,'p_instruction_print','Mparser.py',73),
  ('printables -> printable','printables',1,'p_printables','Mparser.py',78),
  ('printables -> printables , printable','printables',3,'p_printables','Mparser.py',79),
  ('str -> STRING','str',1,'p_str','Mparser.py',84),
  ('printable -> expr','printable',1,'p_printable','Mparser.py',89),
  ('printable -> str','printable',1,'p_printable','Mparser.py',90),
  ('instruction_assign -> assignable = expr','instruction_assign',3,'p_instruction_assign','Mparser.py',95),
  ('instruction_assign -> assignable ADDASSIGN expr','instruction_assign',3,'p_instruction_assign','Mparser.py',96),
  ('instruction_assign -> assignable SUBASSIGN expr','instruction_assign',3,'p_instruction_assign','Mparser.py',97),
  ('instruction_assign -> assignable MULASSIGN expr','instruction_assign',3,'p_instruction_assign','Mparser.py',98),
  ('instruction_assign -> assignable DIVASSIGN expr','instruction_assign',3,'p_instruction_assign','Mparser.py',99),
  ('id -> ID','id',1,'p_id','Mparser.py',104),
  ('assignable -> id','assignable',1,'p_assignable','Mparser.py',109),
  ('assignable -> matrix_element','assignable',1,'p_assignable','Mparser.py',110),
  ('assignable -> vector_element','assignable',1,'p_assignable','Mparser.py',111),
  ('matrix_element -> id [ INTNUM , INTNUM ]','matrix_element',6,'p_matrix_element','Mparser.py',116),
  ('vector_element -> id [ INTNUM ]','vector_element',4,'p_vector_element','Mparser.py',121),
  ("expr -> expr '",'expr',2,'p_expr','Mparser.py',126),
  ('expr -> ( expr )','expr',3,'p_expr_nested','Mparser.py',131),
  ('expr -> matrix_function ( expr )','expr',4,'p_expr_matrix_fun','Mparser.py',136),
  ('expr -> assignable','expr',1,'p_expr_literal','Mparser.py',141),
  ('expr -> matrix','expr',1,'p_expr_literal','Mparser.py',142),
  ('expr -> - expr','expr',2,'p_expr_minus','Mparser.py',147),
  ('expr -> INTNUM','expr',1,'p_expr_int','Mparser.py',152),
  ('expr -> FLOAT','expr',1,'p_expr_float','Mparser.py',157),
  ('expr -> expr + expr','expr',3,'p_binary_expression','Mparser.py',162),
  ('expr -> expr - expr','expr',3,'p_binary_expression','Mparser.py',163),
  ('expr -> expr * expr','expr',3,'p_binary_expression','Mparser.py',164),
  ('expr -> expr / expr','expr',3,'p_binary_expression','Mparser.py',165),
  ('expr -> expr DOTADD expr','expr',3,'p_binary_expression','Mparser.py',166),
  ('expr -> expr DOTSUB expr','expr',3,'p_binary_expression','Mparser.py',167),
  ('expr -> expr DOTMUL expr','expr',3,'p_binary_expression','Mparser.py',168),
  ('expr -> expr DOTDIV expr','expr',3,'p_binary_expression','Mparser.py',169),
  ('expr -> expr > expr','expr',3,'p_binary_expression','Mparser.py',170),
  ('expr -> expr < expr','expr',3,'p_binary_expression','Mparser.py',171),
  ('expr -> expr EQ expr','expr',3,'p_binary_expression','Mparser.py',172),
  ('expr -> expr NEQ expr','expr',3,'p_binary_expression','Mparser.py',173),
  ('expr -> expr LEQ expr','expr',3,'p_binary_expression','Mparser.py',174),
  ('expr -> expr GEQ expr','expr',3,'p_binary_expression','Mparser.py',175),
  ('matrix_function -> ZEROS','matrix_function',1,'p_matrix_function','Mparser.py',181),
  ('matrix_function -> ONES','matrix_function',1,'p_matrix_function','Mparser.py',182),
  ('matrix_function -> EYE','matrix_function',1,'p_matrix_function','Mparser.py',183),
  ('instruction_if -> IF ( expr ) instruction','instruction_if',5,'p_instruction_if','Mparser.py',188),
  ('instruction_if -> IF ( expr ) instruction ELSE instruction','instruction_if',7,'p_instruction_if','Mparser.py',189),
  ('instruction_for -> FOR id = expr : expr instruction','instruction_for',7,'p_instruction_for','Mparser.py',194),
  ('instruction_while -> WHILE ( expr ) instruction','instruction_while',5,'p_instruction_while','Mparser.py',199),
  ('matrix -> [ vectors ]','matrix',3,'p_matrix','Mparser.py',208),
  ('vectors -> vectors , vector','vectors',3,'p_vectors','Mparser.py',213),
  ('vectors -> vector','vectors',1,'p_vectors','Mparser.py',214),
  ('vector -> [ variables ]','vector',3,'p_vector','Mparser.py',219),
  ('variables -> variables , variable','variables',3,'p_variables','Mparser.py',224),
  ('variables -> variable','variables',1,'p_variables','Mparser.py',225),
  ('variable -> INTNUM','variable',1,'p_variable','Mparser.py',230),
  ('variable -> FLOAT','variable',1,'p_variable','Mparser.py',231),
  ('variable -> assignable','variable',1,'p_variable','Mparser.py',232),
]
