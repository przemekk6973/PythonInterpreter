Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> <empty>
Rule 2     start -> instructions
Rule 3     instructions -> instruction
Rule 4     instructions -> instructions instruction
Rule 5     instruction -> instruction_if
Rule 6     instruction -> instruction_for
Rule 7     instruction -> instruction_while
Rule 8     instruction -> instruction_return ;
Rule 9     instruction -> instruction_assign ;
Rule 10    instruction -> instruction_print ;
Rule 11    instruction -> BREAK ;
Rule 12    instruction -> CONTINUE ;
Rule 13    instruction -> { instructions }
Rule 14    instruction_return -> RETURN
Rule 15    instruction_return -> RETURN expr
Rule 16    instruction_print -> PRINT printables
Rule 17    printables -> printable
Rule 18    printables -> printables , printable
Rule 19    printable -> expr
Rule 20    printable -> STRING
Rule 21    instruction_assign -> assignable = expr
Rule 22    instruction_assign -> assignable ADDASSIGN expr
Rule 23    instruction_assign -> assignable SUBASSIGN expr
Rule 24    instruction_assign -> assignable MULASSIGN expr
Rule 25    instruction_assign -> assignable DIVASSIGN expr
Rule 26    assignable -> ID
Rule 27    assignable -> matrix_element
Rule 28    assignable -> vector_element
Rule 29    matrix_element -> ID [ INTNUM , INTNUM ]
Rule 30    vector_element -> ID [ INTNUM ]
Rule 31    expr -> assignable
Rule 32    expr -> INTNUM
Rule 33    expr -> FLOAT
Rule 34    expr -> matrix
Rule 35    expr -> matrix_function ( expr )
Rule 36    expr -> - expr
Rule 37    expr -> expr '
Rule 38    expr -> ( expr )
Rule 39    expr -> expr + expr
Rule 40    expr -> expr - expr
Rule 41    expr -> expr * expr
Rule 42    expr -> expr / expr
Rule 43    expr -> expr DOTADD expr
Rule 44    expr -> expr DOTSUB expr
Rule 45    expr -> expr DOTMUL expr
Rule 46    expr -> expr DOTDIV expr
Rule 47    expr -> expr > expr
Rule 48    expr -> expr < expr
Rule 49    expr -> expr EQ expr
Rule 50    expr -> expr NEQ expr
Rule 51    expr -> expr LEQ expr
Rule 52    expr -> expr GEQ expr
Rule 53    matrix_function -> ZEROS
Rule 54    matrix_function -> ONES
Rule 55    matrix_function -> EYE
Rule 56    instruction_if -> IF ( expr ) instruction
Rule 57    instruction_if -> IF ( expr ) instruction ELSE instruction
Rule 58    instruction_for -> FOR ID = range instruction
Rule 59    instruction_while -> WHILE ( expr ) instruction
Rule 60    range -> expr : expr
Rule 61    matrix -> [ vectors ]
Rule 62    vectors -> vectors , vector
Rule 63    vectors -> vector
Rule 64    vector -> [ variables ]
Rule 65    variables -> variables , variable
Rule 66    variables -> variable
Rule 67    variable -> INTNUM
Rule 68    variable -> FLOAT
Rule 69    variable -> assignable

Terminals, with rules where they appear

'                    : 37
(                    : 35 38 56 57 59
)                    : 35 38 56 57 59
*                    : 41
+                    : 39
,                    : 18 29 62 65
-                    : 36 40
/                    : 42
:                    : 60
;                    : 8 9 10 11 12
<                    : 48
=                    : 21 58
>                    : 47
ADDASSIGN            : 22
BREAK                : 11
CONTINUE             : 12
DIVASSIGN            : 25
DOTADD               : 43
DOTDIV               : 46
DOTMUL               : 45
DOTSUB               : 44
ELSE                 : 57
EQ                   : 49
EYE                  : 55
FLOAT                : 33 68
FOR                  : 58
GEQ                  : 52
ID                   : 26 29 30 58
IF                   : 56 57
INTNUM               : 29 29 30 32 67
LEQ                  : 51
MULASSIGN            : 24
NEQ                  : 50
ONES                 : 54
PRINT                : 16
RETURN               : 14 15
STRING               : 20
SUBASSIGN            : 23
WHILE                : 59
ZEROS                : 53
[                    : 29 30 61 64
]                    : 29 30 61 64
error                : 
{                    : 13
}                    : 13

Nonterminals, with rules where they appear

assignable           : 21 22 23 24 25 31 69
expr                 : 15 19 21 22 23 24 25 35 36 37 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 56 57 59 60 60
instruction          : 3 4 56 57 57 58 59
instruction_assign   : 9
instruction_for      : 6
instruction_if       : 5
instruction_print    : 10
instruction_return   : 8
instruction_while    : 7
instructions         : 2 4 13
matrix               : 34
matrix_element       : 27
matrix_function      : 35
printable            : 17 18
printables           : 16 18
range                : 58
start                : 0
variable             : 65 66
variables            : 64 65
vector               : 62 63
vector_element       : 28
vectors              : 61 62

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> .
    (2) start -> . instructions
    (3) instructions -> . instruction
    (4) instructions -> . instructions instruction
    (5) instruction -> . instruction_if
    (6) instruction -> . instruction_for
    (7) instruction -> . instruction_while
    (8) instruction -> . instruction_return ;
    (9) instruction -> . instruction_assign ;
    (10) instruction -> . instruction_print ;
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . { instructions }
    (56) instruction_if -> . IF ( expr ) instruction
    (57) instruction_if -> . IF ( expr ) instruction ELSE instruction
    (58) instruction_for -> . FOR ID = range instruction
    (59) instruction_while -> . WHILE ( expr ) instruction
    (14) instruction_return -> . RETURN
    (15) instruction_return -> . RETURN expr
    (21) instruction_assign -> . assignable = expr
    (22) instruction_assign -> . assignable ADDASSIGN expr
    (23) instruction_assign -> . assignable SUBASSIGN expr
    (24) instruction_assign -> . assignable MULASSIGN expr
    (25) instruction_assign -> . assignable DIVASSIGN expr
    (16) instruction_print -> . PRINT printables
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    $end            reduce using rule 1 (start -> .)
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    start                          shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    instruction_if                 shift and go to state 4
    instruction_for                shift and go to state 5
    instruction_while              shift and go to state 6
    instruction_return             shift and go to state 7
    instruction_assign             shift and go to state 8
    instruction_print              shift and go to state 9
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 1

    (0) S' -> start .



state 2

    (2) start -> instructions .
    (4) instructions -> instructions . instruction
    (5) instruction -> . instruction_if
    (6) instruction -> . instruction_for
    (7) instruction -> . instruction_while
    (8) instruction -> . instruction_return ;
    (9) instruction -> . instruction_assign ;
    (10) instruction -> . instruction_print ;
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . { instructions }
    (56) instruction_if -> . IF ( expr ) instruction
    (57) instruction_if -> . IF ( expr ) instruction ELSE instruction
    (58) instruction_for -> . FOR ID = range instruction
    (59) instruction_while -> . WHILE ( expr ) instruction
    (14) instruction_return -> . RETURN
    (15) instruction_return -> . RETURN expr
    (21) instruction_assign -> . assignable = expr
    (22) instruction_assign -> . assignable ADDASSIGN expr
    (23) instruction_assign -> . assignable SUBASSIGN expr
    (24) instruction_assign -> . assignable MULASSIGN expr
    (25) instruction_assign -> . assignable DIVASSIGN expr
    (16) instruction_print -> . PRINT printables
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    $end            reduce using rule 2 (start -> instructions .)
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    instruction                    shift and go to state 22
    instruction_if                 shift and go to state 4
    instruction_for                shift and go to state 5
    instruction_while              shift and go to state 6
    instruction_return             shift and go to state 7
    instruction_assign             shift and go to state 8
    instruction_print              shift and go to state 9
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 3

    (3) instructions -> instruction .

    BREAK           reduce using rule 3 (instructions -> instruction .)
    CONTINUE        reduce using rule 3 (instructions -> instruction .)
    {               reduce using rule 3 (instructions -> instruction .)
    IF              reduce using rule 3 (instructions -> instruction .)
    FOR             reduce using rule 3 (instructions -> instruction .)
    WHILE           reduce using rule 3 (instructions -> instruction .)
    RETURN          reduce using rule 3 (instructions -> instruction .)
    PRINT           reduce using rule 3 (instructions -> instruction .)
    ID              reduce using rule 3 (instructions -> instruction .)
    $end            reduce using rule 3 (instructions -> instruction .)
    }               reduce using rule 3 (instructions -> instruction .)


state 4

    (5) instruction -> instruction_if .

    BREAK           reduce using rule 5 (instruction -> instruction_if .)
    CONTINUE        reduce using rule 5 (instruction -> instruction_if .)
    {               reduce using rule 5 (instruction -> instruction_if .)
    IF              reduce using rule 5 (instruction -> instruction_if .)
    FOR             reduce using rule 5 (instruction -> instruction_if .)
    WHILE           reduce using rule 5 (instruction -> instruction_if .)
    RETURN          reduce using rule 5 (instruction -> instruction_if .)
    PRINT           reduce using rule 5 (instruction -> instruction_if .)
    ID              reduce using rule 5 (instruction -> instruction_if .)
    $end            reduce using rule 5 (instruction -> instruction_if .)
    }               reduce using rule 5 (instruction -> instruction_if .)
    ELSE            reduce using rule 5 (instruction -> instruction_if .)


state 5

    (6) instruction -> instruction_for .

    BREAK           reduce using rule 6 (instruction -> instruction_for .)
    CONTINUE        reduce using rule 6 (instruction -> instruction_for .)
    {               reduce using rule 6 (instruction -> instruction_for .)
    IF              reduce using rule 6 (instruction -> instruction_for .)
    FOR             reduce using rule 6 (instruction -> instruction_for .)
    WHILE           reduce using rule 6 (instruction -> instruction_for .)
    RETURN          reduce using rule 6 (instruction -> instruction_for .)
    PRINT           reduce using rule 6 (instruction -> instruction_for .)
    ID              reduce using rule 6 (instruction -> instruction_for .)
    $end            reduce using rule 6 (instruction -> instruction_for .)
    }               reduce using rule 6 (instruction -> instruction_for .)
    ELSE            reduce using rule 6 (instruction -> instruction_for .)


state 6

    (7) instruction -> instruction_while .

    BREAK           reduce using rule 7 (instruction -> instruction_while .)
    CONTINUE        reduce using rule 7 (instruction -> instruction_while .)
    {               reduce using rule 7 (instruction -> instruction_while .)
    IF              reduce using rule 7 (instruction -> instruction_while .)
    FOR             reduce using rule 7 (instruction -> instruction_while .)
    WHILE           reduce using rule 7 (instruction -> instruction_while .)
    RETURN          reduce using rule 7 (instruction -> instruction_while .)
    PRINT           reduce using rule 7 (instruction -> instruction_while .)
    ID              reduce using rule 7 (instruction -> instruction_while .)
    $end            reduce using rule 7 (instruction -> instruction_while .)
    }               reduce using rule 7 (instruction -> instruction_while .)
    ELSE            reduce using rule 7 (instruction -> instruction_while .)


state 7

    (8) instruction -> instruction_return . ;

    ;               shift and go to state 23


state 8

    (9) instruction -> instruction_assign . ;

    ;               shift and go to state 24


state 9

    (10) instruction -> instruction_print . ;

    ;               shift and go to state 25


state 10

    (11) instruction -> BREAK . ;

    ;               shift and go to state 26


state 11

    (12) instruction -> CONTINUE . ;

    ;               shift and go to state 27


state 12

    (13) instruction -> { . instructions }
    (3) instructions -> . instruction
    (4) instructions -> . instructions instruction
    (5) instruction -> . instruction_if
    (6) instruction -> . instruction_for
    (7) instruction -> . instruction_while
    (8) instruction -> . instruction_return ;
    (9) instruction -> . instruction_assign ;
    (10) instruction -> . instruction_print ;
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . { instructions }
    (56) instruction_if -> . IF ( expr ) instruction
    (57) instruction_if -> . IF ( expr ) instruction ELSE instruction
    (58) instruction_for -> . FOR ID = range instruction
    (59) instruction_while -> . WHILE ( expr ) instruction
    (14) instruction_return -> . RETURN
    (15) instruction_return -> . RETURN expr
    (21) instruction_assign -> . assignable = expr
    (22) instruction_assign -> . assignable ADDASSIGN expr
    (23) instruction_assign -> . assignable SUBASSIGN expr
    (24) instruction_assign -> . assignable MULASSIGN expr
    (25) instruction_assign -> . assignable DIVASSIGN expr
    (16) instruction_print -> . PRINT printables
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    instructions                   shift and go to state 28
    instruction                    shift and go to state 3
    instruction_if                 shift and go to state 4
    instruction_for                shift and go to state 5
    instruction_while              shift and go to state 6
    instruction_return             shift and go to state 7
    instruction_assign             shift and go to state 8
    instruction_print              shift and go to state 9
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 13

    (56) instruction_if -> IF . ( expr ) instruction
    (57) instruction_if -> IF . ( expr ) instruction ELSE instruction

    (               shift and go to state 29


state 14

    (58) instruction_for -> FOR . ID = range instruction

    ID              shift and go to state 30


state 15

    (26) assignable -> ID .
    (29) matrix_element -> ID . [ INTNUM , INTNUM ]
    (30) vector_element -> ID . [ INTNUM ]

    =               reduce using rule 26 (assignable -> ID .)
    ADDASSIGN       reduce using rule 26 (assignable -> ID .)
    SUBASSIGN       reduce using rule 26 (assignable -> ID .)
    MULASSIGN       reduce using rule 26 (assignable -> ID .)
    DIVASSIGN       reduce using rule 26 (assignable -> ID .)
    '               reduce using rule 26 (assignable -> ID .)
    +               reduce using rule 26 (assignable -> ID .)
    -               reduce using rule 26 (assignable -> ID .)
    *               reduce using rule 26 (assignable -> ID .)
    /               reduce using rule 26 (assignable -> ID .)
    DOTADD          reduce using rule 26 (assignable -> ID .)
    DOTSUB          reduce using rule 26 (assignable -> ID .)
    DOTMUL          reduce using rule 26 (assignable -> ID .)
    DOTDIV          reduce using rule 26 (assignable -> ID .)
    >               reduce using rule 26 (assignable -> ID .)
    <               reduce using rule 26 (assignable -> ID .)
    EQ              reduce using rule 26 (assignable -> ID .)
    NEQ             reduce using rule 26 (assignable -> ID .)
    LEQ             reduce using rule 26 (assignable -> ID .)
    GEQ             reduce using rule 26 (assignable -> ID .)
    ;               reduce using rule 26 (assignable -> ID .)
    ,               reduce using rule 26 (assignable -> ID .)
    )               reduce using rule 26 (assignable -> ID .)
    :               reduce using rule 26 (assignable -> ID .)
    BREAK           reduce using rule 26 (assignable -> ID .)
    CONTINUE        reduce using rule 26 (assignable -> ID .)
    {               reduce using rule 26 (assignable -> ID .)
    IF              reduce using rule 26 (assignable -> ID .)
    FOR             reduce using rule 26 (assignable -> ID .)
    WHILE           reduce using rule 26 (assignable -> ID .)
    RETURN          reduce using rule 26 (assignable -> ID .)
    PRINT           reduce using rule 26 (assignable -> ID .)
    ID              reduce using rule 26 (assignable -> ID .)
    ]               reduce using rule 26 (assignable -> ID .)
    [               shift and go to state 31


state 16

    (59) instruction_while -> WHILE . ( expr ) instruction

    (               shift and go to state 32


state 17

    (14) instruction_return -> RETURN .
    (15) instruction_return -> RETURN . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    ;               reduce using rule 14 (instruction_return -> RETURN .)
    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 33
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 18

    (21) instruction_assign -> assignable . = expr
    (22) instruction_assign -> assignable . ADDASSIGN expr
    (23) instruction_assign -> assignable . SUBASSIGN expr
    (24) instruction_assign -> assignable . MULASSIGN expr
    (25) instruction_assign -> assignable . DIVASSIGN expr

    =               shift and go to state 45
    ADDASSIGN       shift and go to state 46
    SUBASSIGN       shift and go to state 47
    MULASSIGN       shift and go to state 48
    DIVASSIGN       shift and go to state 49


state 19

    (16) instruction_print -> PRINT . printables
    (17) printables -> . printable
    (18) printables -> . printables , printable
    (19) printable -> . expr
    (20) printable -> . STRING
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    STRING          shift and go to state 53
    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    printables                     shift and go to state 50
    printable                      shift and go to state 51
    expr                           shift and go to state 52
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 20

    (27) assignable -> matrix_element .

    =               reduce using rule 27 (assignable -> matrix_element .)
    ADDASSIGN       reduce using rule 27 (assignable -> matrix_element .)
    SUBASSIGN       reduce using rule 27 (assignable -> matrix_element .)
    MULASSIGN       reduce using rule 27 (assignable -> matrix_element .)
    DIVASSIGN       reduce using rule 27 (assignable -> matrix_element .)
    '               reduce using rule 27 (assignable -> matrix_element .)
    +               reduce using rule 27 (assignable -> matrix_element .)
    -               reduce using rule 27 (assignable -> matrix_element .)
    *               reduce using rule 27 (assignable -> matrix_element .)
    /               reduce using rule 27 (assignable -> matrix_element .)
    DOTADD          reduce using rule 27 (assignable -> matrix_element .)
    DOTSUB          reduce using rule 27 (assignable -> matrix_element .)
    DOTMUL          reduce using rule 27 (assignable -> matrix_element .)
    DOTDIV          reduce using rule 27 (assignable -> matrix_element .)
    >               reduce using rule 27 (assignable -> matrix_element .)
    <               reduce using rule 27 (assignable -> matrix_element .)
    EQ              reduce using rule 27 (assignable -> matrix_element .)
    NEQ             reduce using rule 27 (assignable -> matrix_element .)
    LEQ             reduce using rule 27 (assignable -> matrix_element .)
    GEQ             reduce using rule 27 (assignable -> matrix_element .)
    ;               reduce using rule 27 (assignable -> matrix_element .)
    ,               reduce using rule 27 (assignable -> matrix_element .)
    )               reduce using rule 27 (assignable -> matrix_element .)
    :               reduce using rule 27 (assignable -> matrix_element .)
    BREAK           reduce using rule 27 (assignable -> matrix_element .)
    CONTINUE        reduce using rule 27 (assignable -> matrix_element .)
    {               reduce using rule 27 (assignable -> matrix_element .)
    IF              reduce using rule 27 (assignable -> matrix_element .)
    FOR             reduce using rule 27 (assignable -> matrix_element .)
    WHILE           reduce using rule 27 (assignable -> matrix_element .)
    RETURN          reduce using rule 27 (assignable -> matrix_element .)
    PRINT           reduce using rule 27 (assignable -> matrix_element .)
    ID              reduce using rule 27 (assignable -> matrix_element .)
    ]               reduce using rule 27 (assignable -> matrix_element .)


state 21

    (28) assignable -> vector_element .

    =               reduce using rule 28 (assignable -> vector_element .)
    ADDASSIGN       reduce using rule 28 (assignable -> vector_element .)
    SUBASSIGN       reduce using rule 28 (assignable -> vector_element .)
    MULASSIGN       reduce using rule 28 (assignable -> vector_element .)
    DIVASSIGN       reduce using rule 28 (assignable -> vector_element .)
    '               reduce using rule 28 (assignable -> vector_element .)
    +               reduce using rule 28 (assignable -> vector_element .)
    -               reduce using rule 28 (assignable -> vector_element .)
    *               reduce using rule 28 (assignable -> vector_element .)
    /               reduce using rule 28 (assignable -> vector_element .)
    DOTADD          reduce using rule 28 (assignable -> vector_element .)
    DOTSUB          reduce using rule 28 (assignable -> vector_element .)
    DOTMUL          reduce using rule 28 (assignable -> vector_element .)
    DOTDIV          reduce using rule 28 (assignable -> vector_element .)
    >               reduce using rule 28 (assignable -> vector_element .)
    <               reduce using rule 28 (assignable -> vector_element .)
    EQ              reduce using rule 28 (assignable -> vector_element .)
    NEQ             reduce using rule 28 (assignable -> vector_element .)
    LEQ             reduce using rule 28 (assignable -> vector_element .)
    GEQ             reduce using rule 28 (assignable -> vector_element .)
    ;               reduce using rule 28 (assignable -> vector_element .)
    ,               reduce using rule 28 (assignable -> vector_element .)
    )               reduce using rule 28 (assignable -> vector_element .)
    :               reduce using rule 28 (assignable -> vector_element .)
    BREAK           reduce using rule 28 (assignable -> vector_element .)
    CONTINUE        reduce using rule 28 (assignable -> vector_element .)
    {               reduce using rule 28 (assignable -> vector_element .)
    IF              reduce using rule 28 (assignable -> vector_element .)
    FOR             reduce using rule 28 (assignable -> vector_element .)
    WHILE           reduce using rule 28 (assignable -> vector_element .)
    RETURN          reduce using rule 28 (assignable -> vector_element .)
    PRINT           reduce using rule 28 (assignable -> vector_element .)
    ID              reduce using rule 28 (assignable -> vector_element .)
    ]               reduce using rule 28 (assignable -> vector_element .)


state 22

    (4) instructions -> instructions instruction .

    BREAK           reduce using rule 4 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instructions instruction .)
    {               reduce using rule 4 (instructions -> instructions instruction .)
    IF              reduce using rule 4 (instructions -> instructions instruction .)
    FOR             reduce using rule 4 (instructions -> instructions instruction .)
    WHILE           reduce using rule 4 (instructions -> instructions instruction .)
    RETURN          reduce using rule 4 (instructions -> instructions instruction .)
    PRINT           reduce using rule 4 (instructions -> instructions instruction .)
    ID              reduce using rule 4 (instructions -> instructions instruction .)
    $end            reduce using rule 4 (instructions -> instructions instruction .)
    }               reduce using rule 4 (instructions -> instructions instruction .)


state 23

    (8) instruction -> instruction_return ; .

    BREAK           reduce using rule 8 (instruction -> instruction_return ; .)
    CONTINUE        reduce using rule 8 (instruction -> instruction_return ; .)
    {               reduce using rule 8 (instruction -> instruction_return ; .)
    IF              reduce using rule 8 (instruction -> instruction_return ; .)
    FOR             reduce using rule 8 (instruction -> instruction_return ; .)
    WHILE           reduce using rule 8 (instruction -> instruction_return ; .)
    RETURN          reduce using rule 8 (instruction -> instruction_return ; .)
    PRINT           reduce using rule 8 (instruction -> instruction_return ; .)
    ID              reduce using rule 8 (instruction -> instruction_return ; .)
    $end            reduce using rule 8 (instruction -> instruction_return ; .)
    }               reduce using rule 8 (instruction -> instruction_return ; .)
    ELSE            reduce using rule 8 (instruction -> instruction_return ; .)


state 24

    (9) instruction -> instruction_assign ; .

    BREAK           reduce using rule 9 (instruction -> instruction_assign ; .)
    CONTINUE        reduce using rule 9 (instruction -> instruction_assign ; .)
    {               reduce using rule 9 (instruction -> instruction_assign ; .)
    IF              reduce using rule 9 (instruction -> instruction_assign ; .)
    FOR             reduce using rule 9 (instruction -> instruction_assign ; .)
    WHILE           reduce using rule 9 (instruction -> instruction_assign ; .)
    RETURN          reduce using rule 9 (instruction -> instruction_assign ; .)
    PRINT           reduce using rule 9 (instruction -> instruction_assign ; .)
    ID              reduce using rule 9 (instruction -> instruction_assign ; .)
    $end            reduce using rule 9 (instruction -> instruction_assign ; .)
    }               reduce using rule 9 (instruction -> instruction_assign ; .)
    ELSE            reduce using rule 9 (instruction -> instruction_assign ; .)


state 25

    (10) instruction -> instruction_print ; .

    BREAK           reduce using rule 10 (instruction -> instruction_print ; .)
    CONTINUE        reduce using rule 10 (instruction -> instruction_print ; .)
    {               reduce using rule 10 (instruction -> instruction_print ; .)
    IF              reduce using rule 10 (instruction -> instruction_print ; .)
    FOR             reduce using rule 10 (instruction -> instruction_print ; .)
    WHILE           reduce using rule 10 (instruction -> instruction_print ; .)
    RETURN          reduce using rule 10 (instruction -> instruction_print ; .)
    PRINT           reduce using rule 10 (instruction -> instruction_print ; .)
    ID              reduce using rule 10 (instruction -> instruction_print ; .)
    $end            reduce using rule 10 (instruction -> instruction_print ; .)
    }               reduce using rule 10 (instruction -> instruction_print ; .)
    ELSE            reduce using rule 10 (instruction -> instruction_print ; .)


state 26

    (11) instruction -> BREAK ; .

    BREAK           reduce using rule 11 (instruction -> BREAK ; .)
    CONTINUE        reduce using rule 11 (instruction -> BREAK ; .)
    {               reduce using rule 11 (instruction -> BREAK ; .)
    IF              reduce using rule 11 (instruction -> BREAK ; .)
    FOR             reduce using rule 11 (instruction -> BREAK ; .)
    WHILE           reduce using rule 11 (instruction -> BREAK ; .)
    RETURN          reduce using rule 11 (instruction -> BREAK ; .)
    PRINT           reduce using rule 11 (instruction -> BREAK ; .)
    ID              reduce using rule 11 (instruction -> BREAK ; .)
    $end            reduce using rule 11 (instruction -> BREAK ; .)
    }               reduce using rule 11 (instruction -> BREAK ; .)
    ELSE            reduce using rule 11 (instruction -> BREAK ; .)


state 27

    (12) instruction -> CONTINUE ; .

    BREAK           reduce using rule 12 (instruction -> CONTINUE ; .)
    CONTINUE        reduce using rule 12 (instruction -> CONTINUE ; .)
    {               reduce using rule 12 (instruction -> CONTINUE ; .)
    IF              reduce using rule 12 (instruction -> CONTINUE ; .)
    FOR             reduce using rule 12 (instruction -> CONTINUE ; .)
    WHILE           reduce using rule 12 (instruction -> CONTINUE ; .)
    RETURN          reduce using rule 12 (instruction -> CONTINUE ; .)
    PRINT           reduce using rule 12 (instruction -> CONTINUE ; .)
    ID              reduce using rule 12 (instruction -> CONTINUE ; .)
    $end            reduce using rule 12 (instruction -> CONTINUE ; .)
    }               reduce using rule 12 (instruction -> CONTINUE ; .)
    ELSE            reduce using rule 12 (instruction -> CONTINUE ; .)


state 28

    (13) instruction -> { instructions . }
    (4) instructions -> instructions . instruction
    (5) instruction -> . instruction_if
    (6) instruction -> . instruction_for
    (7) instruction -> . instruction_while
    (8) instruction -> . instruction_return ;
    (9) instruction -> . instruction_assign ;
    (10) instruction -> . instruction_print ;
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . { instructions }
    (56) instruction_if -> . IF ( expr ) instruction
    (57) instruction_if -> . IF ( expr ) instruction ELSE instruction
    (58) instruction_for -> . FOR ID = range instruction
    (59) instruction_while -> . WHILE ( expr ) instruction
    (14) instruction_return -> . RETURN
    (15) instruction_return -> . RETURN expr
    (21) instruction_assign -> . assignable = expr
    (22) instruction_assign -> . assignable ADDASSIGN expr
    (23) instruction_assign -> . assignable SUBASSIGN expr
    (24) instruction_assign -> . assignable MULASSIGN expr
    (25) instruction_assign -> . assignable DIVASSIGN expr
    (16) instruction_print -> . PRINT printables
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    }               shift and go to state 54
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    instruction                    shift and go to state 22
    instruction_if                 shift and go to state 4
    instruction_for                shift and go to state 5
    instruction_while              shift and go to state 6
    instruction_return             shift and go to state 7
    instruction_assign             shift and go to state 8
    instruction_print              shift and go to state 9
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 29

    (56) instruction_if -> IF ( . expr ) instruction
    (57) instruction_if -> IF ( . expr ) instruction ELSE instruction
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 55
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 30

    (58) instruction_for -> FOR ID . = range instruction

    =               shift and go to state 56


state 31

    (29) matrix_element -> ID [ . INTNUM , INTNUM ]
    (30) vector_element -> ID [ . INTNUM ]

    INTNUM          shift and go to state 57


state 32

    (59) instruction_while -> WHILE ( . expr ) instruction
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 58
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 33

    (15) instruction_return -> RETURN expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    ;               reduce using rule 15 (instruction_return -> RETURN expr .)
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67
    >               shift and go to state 68
    <               shift and go to state 69
    EQ              shift and go to state 70
    NEQ             shift and go to state 71
    LEQ             shift and go to state 72
    GEQ             shift and go to state 73


state 34

    (31) expr -> assignable .

    '               reduce using rule 31 (expr -> assignable .)
    +               reduce using rule 31 (expr -> assignable .)
    -               reduce using rule 31 (expr -> assignable .)
    *               reduce using rule 31 (expr -> assignable .)
    /               reduce using rule 31 (expr -> assignable .)
    DOTADD          reduce using rule 31 (expr -> assignable .)
    DOTSUB          reduce using rule 31 (expr -> assignable .)
    DOTMUL          reduce using rule 31 (expr -> assignable .)
    DOTDIV          reduce using rule 31 (expr -> assignable .)
    >               reduce using rule 31 (expr -> assignable .)
    <               reduce using rule 31 (expr -> assignable .)
    EQ              reduce using rule 31 (expr -> assignable .)
    NEQ             reduce using rule 31 (expr -> assignable .)
    LEQ             reduce using rule 31 (expr -> assignable .)
    GEQ             reduce using rule 31 (expr -> assignable .)
    ;               reduce using rule 31 (expr -> assignable .)
    ,               reduce using rule 31 (expr -> assignable .)
    )               reduce using rule 31 (expr -> assignable .)
    :               reduce using rule 31 (expr -> assignable .)
    BREAK           reduce using rule 31 (expr -> assignable .)
    CONTINUE        reduce using rule 31 (expr -> assignable .)
    {               reduce using rule 31 (expr -> assignable .)
    IF              reduce using rule 31 (expr -> assignable .)
    FOR             reduce using rule 31 (expr -> assignable .)
    WHILE           reduce using rule 31 (expr -> assignable .)
    RETURN          reduce using rule 31 (expr -> assignable .)
    PRINT           reduce using rule 31 (expr -> assignable .)
    ID              reduce using rule 31 (expr -> assignable .)


state 35

    (32) expr -> INTNUM .

    '               reduce using rule 32 (expr -> INTNUM .)
    +               reduce using rule 32 (expr -> INTNUM .)
    -               reduce using rule 32 (expr -> INTNUM .)
    *               reduce using rule 32 (expr -> INTNUM .)
    /               reduce using rule 32 (expr -> INTNUM .)
    DOTADD          reduce using rule 32 (expr -> INTNUM .)
    DOTSUB          reduce using rule 32 (expr -> INTNUM .)
    DOTMUL          reduce using rule 32 (expr -> INTNUM .)
    DOTDIV          reduce using rule 32 (expr -> INTNUM .)
    >               reduce using rule 32 (expr -> INTNUM .)
    <               reduce using rule 32 (expr -> INTNUM .)
    EQ              reduce using rule 32 (expr -> INTNUM .)
    NEQ             reduce using rule 32 (expr -> INTNUM .)
    LEQ             reduce using rule 32 (expr -> INTNUM .)
    GEQ             reduce using rule 32 (expr -> INTNUM .)
    ;               reduce using rule 32 (expr -> INTNUM .)
    ,               reduce using rule 32 (expr -> INTNUM .)
    )               reduce using rule 32 (expr -> INTNUM .)
    :               reduce using rule 32 (expr -> INTNUM .)
    BREAK           reduce using rule 32 (expr -> INTNUM .)
    CONTINUE        reduce using rule 32 (expr -> INTNUM .)
    {               reduce using rule 32 (expr -> INTNUM .)
    IF              reduce using rule 32 (expr -> INTNUM .)
    FOR             reduce using rule 32 (expr -> INTNUM .)
    WHILE           reduce using rule 32 (expr -> INTNUM .)
    RETURN          reduce using rule 32 (expr -> INTNUM .)
    PRINT           reduce using rule 32 (expr -> INTNUM .)
    ID              reduce using rule 32 (expr -> INTNUM .)


state 36

    (33) expr -> FLOAT .

    '               reduce using rule 33 (expr -> FLOAT .)
    +               reduce using rule 33 (expr -> FLOAT .)
    -               reduce using rule 33 (expr -> FLOAT .)
    *               reduce using rule 33 (expr -> FLOAT .)
    /               reduce using rule 33 (expr -> FLOAT .)
    DOTADD          reduce using rule 33 (expr -> FLOAT .)
    DOTSUB          reduce using rule 33 (expr -> FLOAT .)
    DOTMUL          reduce using rule 33 (expr -> FLOAT .)
    DOTDIV          reduce using rule 33 (expr -> FLOAT .)
    >               reduce using rule 33 (expr -> FLOAT .)
    <               reduce using rule 33 (expr -> FLOAT .)
    EQ              reduce using rule 33 (expr -> FLOAT .)
    NEQ             reduce using rule 33 (expr -> FLOAT .)
    LEQ             reduce using rule 33 (expr -> FLOAT .)
    GEQ             reduce using rule 33 (expr -> FLOAT .)
    ;               reduce using rule 33 (expr -> FLOAT .)
    ,               reduce using rule 33 (expr -> FLOAT .)
    )               reduce using rule 33 (expr -> FLOAT .)
    :               reduce using rule 33 (expr -> FLOAT .)
    BREAK           reduce using rule 33 (expr -> FLOAT .)
    CONTINUE        reduce using rule 33 (expr -> FLOAT .)
    {               reduce using rule 33 (expr -> FLOAT .)
    IF              reduce using rule 33 (expr -> FLOAT .)
    FOR             reduce using rule 33 (expr -> FLOAT .)
    WHILE           reduce using rule 33 (expr -> FLOAT .)
    RETURN          reduce using rule 33 (expr -> FLOAT .)
    PRINT           reduce using rule 33 (expr -> FLOAT .)
    ID              reduce using rule 33 (expr -> FLOAT .)


state 37

    (34) expr -> matrix .

    '               reduce using rule 34 (expr -> matrix .)
    +               reduce using rule 34 (expr -> matrix .)
    -               reduce using rule 34 (expr -> matrix .)
    *               reduce using rule 34 (expr -> matrix .)
    /               reduce using rule 34 (expr -> matrix .)
    DOTADD          reduce using rule 34 (expr -> matrix .)
    DOTSUB          reduce using rule 34 (expr -> matrix .)
    DOTMUL          reduce using rule 34 (expr -> matrix .)
    DOTDIV          reduce using rule 34 (expr -> matrix .)
    >               reduce using rule 34 (expr -> matrix .)
    <               reduce using rule 34 (expr -> matrix .)
    EQ              reduce using rule 34 (expr -> matrix .)
    NEQ             reduce using rule 34 (expr -> matrix .)
    LEQ             reduce using rule 34 (expr -> matrix .)
    GEQ             reduce using rule 34 (expr -> matrix .)
    ;               reduce using rule 34 (expr -> matrix .)
    ,               reduce using rule 34 (expr -> matrix .)
    )               reduce using rule 34 (expr -> matrix .)
    :               reduce using rule 34 (expr -> matrix .)
    BREAK           reduce using rule 34 (expr -> matrix .)
    CONTINUE        reduce using rule 34 (expr -> matrix .)
    {               reduce using rule 34 (expr -> matrix .)
    IF              reduce using rule 34 (expr -> matrix .)
    FOR             reduce using rule 34 (expr -> matrix .)
    WHILE           reduce using rule 34 (expr -> matrix .)
    RETURN          reduce using rule 34 (expr -> matrix .)
    PRINT           reduce using rule 34 (expr -> matrix .)
    ID              reduce using rule 34 (expr -> matrix .)


state 38

    (35) expr -> matrix_function . ( expr )

    (               shift and go to state 74


state 39

    (38) expr -> ( . expr )
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 75
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 40

    (36) expr -> - . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 76
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 41

    (61) matrix -> [ . vectors ]
    (62) vectors -> . vectors , vector
    (63) vectors -> . vector
    (64) vector -> . [ variables ]

    [               shift and go to state 77

    vectors                        shift and go to state 78
    vector                         shift and go to state 79

state 42

    (53) matrix_function -> ZEROS .

    (               reduce using rule 53 (matrix_function -> ZEROS .)


state 43

    (54) matrix_function -> ONES .

    (               reduce using rule 54 (matrix_function -> ONES .)


state 44

    (55) matrix_function -> EYE .

    (               reduce using rule 55 (matrix_function -> EYE .)


state 45

    (21) instruction_assign -> assignable = . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    assignable                     shift and go to state 34
    expr                           shift and go to state 80
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 46

    (22) instruction_assign -> assignable ADDASSIGN . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    assignable                     shift and go to state 34
    expr                           shift and go to state 81
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 47

    (23) instruction_assign -> assignable SUBASSIGN . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    assignable                     shift and go to state 34
    expr                           shift and go to state 82
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 48

    (24) instruction_assign -> assignable MULASSIGN . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    assignable                     shift and go to state 34
    expr                           shift and go to state 83
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 49

    (25) instruction_assign -> assignable DIVASSIGN . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    assignable                     shift and go to state 34
    expr                           shift and go to state 84
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 50

    (16) instruction_print -> PRINT printables .
    (18) printables -> printables . , printable

    ;               reduce using rule 16 (instruction_print -> PRINT printables .)
    ,               shift and go to state 85


state 51

    (17) printables -> printable .

    ,               reduce using rule 17 (printables -> printable .)
    ;               reduce using rule 17 (printables -> printable .)


state 52

    (19) printable -> expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    ,               reduce using rule 19 (printable -> expr .)
    ;               reduce using rule 19 (printable -> expr .)
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67
    >               shift and go to state 68
    <               shift and go to state 69
    EQ              shift and go to state 70
    NEQ             shift and go to state 71
    LEQ             shift and go to state 72
    GEQ             shift and go to state 73


state 53

    (20) printable -> STRING .

    ,               reduce using rule 20 (printable -> STRING .)
    ;               reduce using rule 20 (printable -> STRING .)


state 54

    (13) instruction -> { instructions } .

    BREAK           reduce using rule 13 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 13 (instruction -> { instructions } .)
    {               reduce using rule 13 (instruction -> { instructions } .)
    IF              reduce using rule 13 (instruction -> { instructions } .)
    FOR             reduce using rule 13 (instruction -> { instructions } .)
    WHILE           reduce using rule 13 (instruction -> { instructions } .)
    RETURN          reduce using rule 13 (instruction -> { instructions } .)
    PRINT           reduce using rule 13 (instruction -> { instructions } .)
    ID              reduce using rule 13 (instruction -> { instructions } .)
    $end            reduce using rule 13 (instruction -> { instructions } .)
    }               reduce using rule 13 (instruction -> { instructions } .)
    ELSE            reduce using rule 13 (instruction -> { instructions } .)


state 55

    (56) instruction_if -> IF ( expr . ) instruction
    (57) instruction_if -> IF ( expr . ) instruction ELSE instruction
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    )               shift and go to state 86
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67
    >               shift and go to state 68
    <               shift and go to state 69
    EQ              shift and go to state 70
    NEQ             shift and go to state 71
    LEQ             shift and go to state 72
    GEQ             shift and go to state 73


state 56

    (58) instruction_for -> FOR ID = . range instruction
    (60) range -> . expr : expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    range                          shift and go to state 87
    expr                           shift and go to state 88
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 57

    (29) matrix_element -> ID [ INTNUM . , INTNUM ]
    (30) vector_element -> ID [ INTNUM . ]

    ,               shift and go to state 89
    ]               shift and go to state 90


state 58

    (59) instruction_while -> WHILE ( expr . ) instruction
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    )               shift and go to state 91
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67
    >               shift and go to state 68
    <               shift and go to state 69
    EQ              shift and go to state 70
    NEQ             shift and go to state 71
    LEQ             shift and go to state 72
    GEQ             shift and go to state 73


state 59

    (37) expr -> expr ' .

    '               reduce using rule 37 (expr -> expr ' .)
    +               reduce using rule 37 (expr -> expr ' .)
    -               reduce using rule 37 (expr -> expr ' .)
    *               reduce using rule 37 (expr -> expr ' .)
    /               reduce using rule 37 (expr -> expr ' .)
    DOTADD          reduce using rule 37 (expr -> expr ' .)
    DOTSUB          reduce using rule 37 (expr -> expr ' .)
    DOTMUL          reduce using rule 37 (expr -> expr ' .)
    DOTDIV          reduce using rule 37 (expr -> expr ' .)
    >               reduce using rule 37 (expr -> expr ' .)
    <               reduce using rule 37 (expr -> expr ' .)
    EQ              reduce using rule 37 (expr -> expr ' .)
    NEQ             reduce using rule 37 (expr -> expr ' .)
    LEQ             reduce using rule 37 (expr -> expr ' .)
    GEQ             reduce using rule 37 (expr -> expr ' .)
    ;               reduce using rule 37 (expr -> expr ' .)
    ,               reduce using rule 37 (expr -> expr ' .)
    )               reduce using rule 37 (expr -> expr ' .)
    :               reduce using rule 37 (expr -> expr ' .)
    BREAK           reduce using rule 37 (expr -> expr ' .)
    CONTINUE        reduce using rule 37 (expr -> expr ' .)
    {               reduce using rule 37 (expr -> expr ' .)
    IF              reduce using rule 37 (expr -> expr ' .)
    FOR             reduce using rule 37 (expr -> expr ' .)
    WHILE           reduce using rule 37 (expr -> expr ' .)
    RETURN          reduce using rule 37 (expr -> expr ' .)
    PRINT           reduce using rule 37 (expr -> expr ' .)
    ID              reduce using rule 37 (expr -> expr ' .)


state 60

    (39) expr -> expr + . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 92
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 61

    (40) expr -> expr - . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 93
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 62

    (41) expr -> expr * . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 94
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 63

    (42) expr -> expr / . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 95
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 64

    (43) expr -> expr DOTADD . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 96
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 65

    (44) expr -> expr DOTSUB . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 97
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 66

    (45) expr -> expr DOTMUL . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 98
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 67

    (46) expr -> expr DOTDIV . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 99
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 68

    (47) expr -> expr > . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 100
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 69

    (48) expr -> expr < . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 101
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 70

    (49) expr -> expr EQ . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 102
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 71

    (50) expr -> expr NEQ . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 103
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 72

    (51) expr -> expr LEQ . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 104
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 73

    (52) expr -> expr GEQ . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 105
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 74

    (35) expr -> matrix_function ( . expr )
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    matrix_function                shift and go to state 38
    expr                           shift and go to state 106
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 75

    (38) expr -> ( expr . )
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    )               shift and go to state 107
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67
    >               shift and go to state 68
    <               shift and go to state 69
    EQ              shift and go to state 70
    NEQ             shift and go to state 71
    LEQ             shift and go to state 72
    GEQ             shift and go to state 73


state 76

    (36) expr -> - expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    +               reduce using rule 36 (expr -> - expr .)
    -               reduce using rule 36 (expr -> - expr .)
    *               reduce using rule 36 (expr -> - expr .)
    /               reduce using rule 36 (expr -> - expr .)
    DOTADD          reduce using rule 36 (expr -> - expr .)
    DOTSUB          reduce using rule 36 (expr -> - expr .)
    DOTMUL          reduce using rule 36 (expr -> - expr .)
    DOTDIV          reduce using rule 36 (expr -> - expr .)
    >               reduce using rule 36 (expr -> - expr .)
    <               reduce using rule 36 (expr -> - expr .)
    EQ              reduce using rule 36 (expr -> - expr .)
    NEQ             reduce using rule 36 (expr -> - expr .)
    LEQ             reduce using rule 36 (expr -> - expr .)
    GEQ             reduce using rule 36 (expr -> - expr .)
    ;               reduce using rule 36 (expr -> - expr .)
    ,               reduce using rule 36 (expr -> - expr .)
    )               reduce using rule 36 (expr -> - expr .)
    :               reduce using rule 36 (expr -> - expr .)
    BREAK           reduce using rule 36 (expr -> - expr .)
    CONTINUE        reduce using rule 36 (expr -> - expr .)
    {               reduce using rule 36 (expr -> - expr .)
    IF              reduce using rule 36 (expr -> - expr .)
    FOR             reduce using rule 36 (expr -> - expr .)
    WHILE           reduce using rule 36 (expr -> - expr .)
    RETURN          reduce using rule 36 (expr -> - expr .)
    PRINT           reduce using rule 36 (expr -> - expr .)
    ID              reduce using rule 36 (expr -> - expr .)
    '               shift and go to state 59

  ! '               [ reduce using rule 36 (expr -> - expr .) ]
  ! +               [ shift and go to state 60 ]
  ! -               [ shift and go to state 61 ]
  ! *               [ shift and go to state 62 ]
  ! /               [ shift and go to state 63 ]
  ! DOTADD          [ shift and go to state 64 ]
  ! DOTSUB          [ shift and go to state 65 ]
  ! DOTMUL          [ shift and go to state 66 ]
  ! DOTDIV          [ shift and go to state 67 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 77

    (64) vector -> [ . variables ]
    (65) variables -> . variables , variable
    (66) variables -> . variable
    (67) variable -> . INTNUM
    (68) variable -> . FLOAT
    (69) variable -> . assignable
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 110
    FLOAT           shift and go to state 111
    ID              shift and go to state 15

    variables                      shift and go to state 108
    variable                       shift and go to state 109
    assignable                     shift and go to state 112
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 78

    (61) matrix -> [ vectors . ]
    (62) vectors -> vectors . , vector

    ]               shift and go to state 113
    ,               shift and go to state 114


state 79

    (63) vectors -> vector .

    ]               reduce using rule 63 (vectors -> vector .)
    ,               reduce using rule 63 (vectors -> vector .)


state 80

    (21) instruction_assign -> assignable = expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    ;               reduce using rule 21 (instruction_assign -> assignable = expr .)
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67
    >               shift and go to state 68
    <               shift and go to state 69
    EQ              shift and go to state 70
    NEQ             shift and go to state 71
    LEQ             shift and go to state 72
    GEQ             shift and go to state 73


state 81

    (22) instruction_assign -> assignable ADDASSIGN expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    ;               reduce using rule 22 (instruction_assign -> assignable ADDASSIGN expr .)
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67
    >               shift and go to state 68
    <               shift and go to state 69
    EQ              shift and go to state 70
    NEQ             shift and go to state 71
    LEQ             shift and go to state 72
    GEQ             shift and go to state 73


state 82

    (23) instruction_assign -> assignable SUBASSIGN expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    ;               reduce using rule 23 (instruction_assign -> assignable SUBASSIGN expr .)
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67
    >               shift and go to state 68
    <               shift and go to state 69
    EQ              shift and go to state 70
    NEQ             shift and go to state 71
    LEQ             shift and go to state 72
    GEQ             shift and go to state 73


state 83

    (24) instruction_assign -> assignable MULASSIGN expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    ;               reduce using rule 24 (instruction_assign -> assignable MULASSIGN expr .)
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67
    >               shift and go to state 68
    <               shift and go to state 69
    EQ              shift and go to state 70
    NEQ             shift and go to state 71
    LEQ             shift and go to state 72
    GEQ             shift and go to state 73


state 84

    (25) instruction_assign -> assignable DIVASSIGN expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    ;               reduce using rule 25 (instruction_assign -> assignable DIVASSIGN expr .)
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67
    >               shift and go to state 68
    <               shift and go to state 69
    EQ              shift and go to state 70
    NEQ             shift and go to state 71
    LEQ             shift and go to state 72
    GEQ             shift and go to state 73


state 85

    (18) printables -> printables , . printable
    (19) printable -> . expr
    (20) printable -> . STRING
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    STRING          shift and go to state 53
    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    printable                      shift and go to state 115
    expr                           shift and go to state 52
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 86

    (56) instruction_if -> IF ( expr ) . instruction
    (57) instruction_if -> IF ( expr ) . instruction ELSE instruction
    (5) instruction -> . instruction_if
    (6) instruction -> . instruction_for
    (7) instruction -> . instruction_while
    (8) instruction -> . instruction_return ;
    (9) instruction -> . instruction_assign ;
    (10) instruction -> . instruction_print ;
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . { instructions }
    (56) instruction_if -> . IF ( expr ) instruction
    (57) instruction_if -> . IF ( expr ) instruction ELSE instruction
    (58) instruction_for -> . FOR ID = range instruction
    (59) instruction_while -> . WHILE ( expr ) instruction
    (14) instruction_return -> . RETURN
    (15) instruction_return -> . RETURN expr
    (21) instruction_assign -> . assignable = expr
    (22) instruction_assign -> . assignable ADDASSIGN expr
    (23) instruction_assign -> . assignable SUBASSIGN expr
    (24) instruction_assign -> . assignable MULASSIGN expr
    (25) instruction_assign -> . assignable DIVASSIGN expr
    (16) instruction_print -> . PRINT printables
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    instruction                    shift and go to state 116
    instruction_if                 shift and go to state 4
    instruction_for                shift and go to state 5
    instruction_while              shift and go to state 6
    instruction_return             shift and go to state 7
    instruction_assign             shift and go to state 8
    instruction_print              shift and go to state 9
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 87

    (58) instruction_for -> FOR ID = range . instruction
    (5) instruction -> . instruction_if
    (6) instruction -> . instruction_for
    (7) instruction -> . instruction_while
    (8) instruction -> . instruction_return ;
    (9) instruction -> . instruction_assign ;
    (10) instruction -> . instruction_print ;
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . { instructions }
    (56) instruction_if -> . IF ( expr ) instruction
    (57) instruction_if -> . IF ( expr ) instruction ELSE instruction
    (58) instruction_for -> . FOR ID = range instruction
    (59) instruction_while -> . WHILE ( expr ) instruction
    (14) instruction_return -> . RETURN
    (15) instruction_return -> . RETURN expr
    (21) instruction_assign -> . assignable = expr
    (22) instruction_assign -> . assignable ADDASSIGN expr
    (23) instruction_assign -> . assignable SUBASSIGN expr
    (24) instruction_assign -> . assignable MULASSIGN expr
    (25) instruction_assign -> . assignable DIVASSIGN expr
    (16) instruction_print -> . PRINT printables
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    instruction                    shift and go to state 117
    instruction_if                 shift and go to state 4
    instruction_for                shift and go to state 5
    instruction_while              shift and go to state 6
    instruction_return             shift and go to state 7
    instruction_assign             shift and go to state 8
    instruction_print              shift and go to state 9
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 88

    (60) range -> expr . : expr
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    :               shift and go to state 118
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67
    >               shift and go to state 68
    <               shift and go to state 69
    EQ              shift and go to state 70
    NEQ             shift and go to state 71
    LEQ             shift and go to state 72
    GEQ             shift and go to state 73


state 89

    (29) matrix_element -> ID [ INTNUM , . INTNUM ]

    INTNUM          shift and go to state 119


state 90

    (30) vector_element -> ID [ INTNUM ] .

    =               reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    ADDASSIGN       reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    SUBASSIGN       reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    MULASSIGN       reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    DIVASSIGN       reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    '               reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    +               reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    -               reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    *               reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    /               reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    DOTADD          reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    DOTSUB          reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    DOTMUL          reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    DOTDIV          reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    >               reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    <               reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    EQ              reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    NEQ             reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    LEQ             reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    GEQ             reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    ;               reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    ,               reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    )               reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    :               reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    BREAK           reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    CONTINUE        reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    {               reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    IF              reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    FOR             reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    WHILE           reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    RETURN          reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    PRINT           reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    ID              reduce using rule 30 (vector_element -> ID [ INTNUM ] .)
    ]               reduce using rule 30 (vector_element -> ID [ INTNUM ] .)


state 91

    (59) instruction_while -> WHILE ( expr ) . instruction
    (5) instruction -> . instruction_if
    (6) instruction -> . instruction_for
    (7) instruction -> . instruction_while
    (8) instruction -> . instruction_return ;
    (9) instruction -> . instruction_assign ;
    (10) instruction -> . instruction_print ;
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . { instructions }
    (56) instruction_if -> . IF ( expr ) instruction
    (57) instruction_if -> . IF ( expr ) instruction ELSE instruction
    (58) instruction_for -> . FOR ID = range instruction
    (59) instruction_while -> . WHILE ( expr ) instruction
    (14) instruction_return -> . RETURN
    (15) instruction_return -> . RETURN expr
    (21) instruction_assign -> . assignable = expr
    (22) instruction_assign -> . assignable ADDASSIGN expr
    (23) instruction_assign -> . assignable SUBASSIGN expr
    (24) instruction_assign -> . assignable MULASSIGN expr
    (25) instruction_assign -> . assignable DIVASSIGN expr
    (16) instruction_print -> . PRINT printables
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    instruction                    shift and go to state 120
    instruction_if                 shift and go to state 4
    instruction_for                shift and go to state 5
    instruction_while              shift and go to state 6
    instruction_return             shift and go to state 7
    instruction_assign             shift and go to state 8
    instruction_print              shift and go to state 9
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 92

    (39) expr -> expr + expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    +               reduce using rule 39 (expr -> expr + expr .)
    -               reduce using rule 39 (expr -> expr + expr .)
    >               reduce using rule 39 (expr -> expr + expr .)
    <               reduce using rule 39 (expr -> expr + expr .)
    EQ              reduce using rule 39 (expr -> expr + expr .)
    NEQ             reduce using rule 39 (expr -> expr + expr .)
    LEQ             reduce using rule 39 (expr -> expr + expr .)
    GEQ             reduce using rule 39 (expr -> expr + expr .)
    ;               reduce using rule 39 (expr -> expr + expr .)
    ,               reduce using rule 39 (expr -> expr + expr .)
    )               reduce using rule 39 (expr -> expr + expr .)
    :               reduce using rule 39 (expr -> expr + expr .)
    BREAK           reduce using rule 39 (expr -> expr + expr .)
    CONTINUE        reduce using rule 39 (expr -> expr + expr .)
    {               reduce using rule 39 (expr -> expr + expr .)
    IF              reduce using rule 39 (expr -> expr + expr .)
    FOR             reduce using rule 39 (expr -> expr + expr .)
    WHILE           reduce using rule 39 (expr -> expr + expr .)
    RETURN          reduce using rule 39 (expr -> expr + expr .)
    PRINT           reduce using rule 39 (expr -> expr + expr .)
    ID              reduce using rule 39 (expr -> expr + expr .)
    '               shift and go to state 59
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67

  ! '               [ reduce using rule 39 (expr -> expr + expr .) ]
  ! *               [ reduce using rule 39 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 39 (expr -> expr + expr .) ]
  ! DOTADD          [ reduce using rule 39 (expr -> expr + expr .) ]
  ! DOTSUB          [ reduce using rule 39 (expr -> expr + expr .) ]
  ! DOTMUL          [ reduce using rule 39 (expr -> expr + expr .) ]
  ! DOTDIV          [ reduce using rule 39 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 60 ]
  ! -               [ shift and go to state 61 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 93

    (40) expr -> expr - expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    +               reduce using rule 40 (expr -> expr - expr .)
    -               reduce using rule 40 (expr -> expr - expr .)
    >               reduce using rule 40 (expr -> expr - expr .)
    <               reduce using rule 40 (expr -> expr - expr .)
    EQ              reduce using rule 40 (expr -> expr - expr .)
    NEQ             reduce using rule 40 (expr -> expr - expr .)
    LEQ             reduce using rule 40 (expr -> expr - expr .)
    GEQ             reduce using rule 40 (expr -> expr - expr .)
    ;               reduce using rule 40 (expr -> expr - expr .)
    ,               reduce using rule 40 (expr -> expr - expr .)
    )               reduce using rule 40 (expr -> expr - expr .)
    :               reduce using rule 40 (expr -> expr - expr .)
    BREAK           reduce using rule 40 (expr -> expr - expr .)
    CONTINUE        reduce using rule 40 (expr -> expr - expr .)
    {               reduce using rule 40 (expr -> expr - expr .)
    IF              reduce using rule 40 (expr -> expr - expr .)
    FOR             reduce using rule 40 (expr -> expr - expr .)
    WHILE           reduce using rule 40 (expr -> expr - expr .)
    RETURN          reduce using rule 40 (expr -> expr - expr .)
    PRINT           reduce using rule 40 (expr -> expr - expr .)
    ID              reduce using rule 40 (expr -> expr - expr .)
    '               shift and go to state 59
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67

  ! '               [ reduce using rule 40 (expr -> expr - expr .) ]
  ! *               [ reduce using rule 40 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 40 (expr -> expr - expr .) ]
  ! DOTADD          [ reduce using rule 40 (expr -> expr - expr .) ]
  ! DOTSUB          [ reduce using rule 40 (expr -> expr - expr .) ]
  ! DOTMUL          [ reduce using rule 40 (expr -> expr - expr .) ]
  ! DOTDIV          [ reduce using rule 40 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 60 ]
  ! -               [ shift and go to state 61 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 94

    (41) expr -> expr * expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    +               reduce using rule 41 (expr -> expr * expr .)
    -               reduce using rule 41 (expr -> expr * expr .)
    *               reduce using rule 41 (expr -> expr * expr .)
    /               reduce using rule 41 (expr -> expr * expr .)
    DOTADD          reduce using rule 41 (expr -> expr * expr .)
    DOTSUB          reduce using rule 41 (expr -> expr * expr .)
    >               reduce using rule 41 (expr -> expr * expr .)
    <               reduce using rule 41 (expr -> expr * expr .)
    EQ              reduce using rule 41 (expr -> expr * expr .)
    NEQ             reduce using rule 41 (expr -> expr * expr .)
    LEQ             reduce using rule 41 (expr -> expr * expr .)
    GEQ             reduce using rule 41 (expr -> expr * expr .)
    ;               reduce using rule 41 (expr -> expr * expr .)
    ,               reduce using rule 41 (expr -> expr * expr .)
    )               reduce using rule 41 (expr -> expr * expr .)
    :               reduce using rule 41 (expr -> expr * expr .)
    BREAK           reduce using rule 41 (expr -> expr * expr .)
    CONTINUE        reduce using rule 41 (expr -> expr * expr .)
    {               reduce using rule 41 (expr -> expr * expr .)
    IF              reduce using rule 41 (expr -> expr * expr .)
    FOR             reduce using rule 41 (expr -> expr * expr .)
    WHILE           reduce using rule 41 (expr -> expr * expr .)
    RETURN          reduce using rule 41 (expr -> expr * expr .)
    PRINT           reduce using rule 41 (expr -> expr * expr .)
    ID              reduce using rule 41 (expr -> expr * expr .)
    '               shift and go to state 59
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67

  ! '               [ reduce using rule 41 (expr -> expr * expr .) ]
  ! DOTMUL          [ reduce using rule 41 (expr -> expr * expr .) ]
  ! DOTDIV          [ reduce using rule 41 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 60 ]
  ! -               [ shift and go to state 61 ]
  ! *               [ shift and go to state 62 ]
  ! /               [ shift and go to state 63 ]
  ! DOTADD          [ shift and go to state 64 ]
  ! DOTSUB          [ shift and go to state 65 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 95

    (42) expr -> expr / expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    +               reduce using rule 42 (expr -> expr / expr .)
    -               reduce using rule 42 (expr -> expr / expr .)
    *               reduce using rule 42 (expr -> expr / expr .)
    /               reduce using rule 42 (expr -> expr / expr .)
    DOTADD          reduce using rule 42 (expr -> expr / expr .)
    DOTSUB          reduce using rule 42 (expr -> expr / expr .)
    >               reduce using rule 42 (expr -> expr / expr .)
    <               reduce using rule 42 (expr -> expr / expr .)
    EQ              reduce using rule 42 (expr -> expr / expr .)
    NEQ             reduce using rule 42 (expr -> expr / expr .)
    LEQ             reduce using rule 42 (expr -> expr / expr .)
    GEQ             reduce using rule 42 (expr -> expr / expr .)
    ;               reduce using rule 42 (expr -> expr / expr .)
    ,               reduce using rule 42 (expr -> expr / expr .)
    )               reduce using rule 42 (expr -> expr / expr .)
    :               reduce using rule 42 (expr -> expr / expr .)
    BREAK           reduce using rule 42 (expr -> expr / expr .)
    CONTINUE        reduce using rule 42 (expr -> expr / expr .)
    {               reduce using rule 42 (expr -> expr / expr .)
    IF              reduce using rule 42 (expr -> expr / expr .)
    FOR             reduce using rule 42 (expr -> expr / expr .)
    WHILE           reduce using rule 42 (expr -> expr / expr .)
    RETURN          reduce using rule 42 (expr -> expr / expr .)
    PRINT           reduce using rule 42 (expr -> expr / expr .)
    ID              reduce using rule 42 (expr -> expr / expr .)
    '               shift and go to state 59
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67

  ! '               [ reduce using rule 42 (expr -> expr / expr .) ]
  ! DOTMUL          [ reduce using rule 42 (expr -> expr / expr .) ]
  ! DOTDIV          [ reduce using rule 42 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 60 ]
  ! -               [ shift and go to state 61 ]
  ! *               [ shift and go to state 62 ]
  ! /               [ shift and go to state 63 ]
  ! DOTADD          [ shift and go to state 64 ]
  ! DOTSUB          [ shift and go to state 65 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 96

    (43) expr -> expr DOTADD expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    +               reduce using rule 43 (expr -> expr DOTADD expr .)
    -               reduce using rule 43 (expr -> expr DOTADD expr .)
    DOTADD          reduce using rule 43 (expr -> expr DOTADD expr .)
    DOTSUB          reduce using rule 43 (expr -> expr DOTADD expr .)
    >               reduce using rule 43 (expr -> expr DOTADD expr .)
    <               reduce using rule 43 (expr -> expr DOTADD expr .)
    EQ              reduce using rule 43 (expr -> expr DOTADD expr .)
    NEQ             reduce using rule 43 (expr -> expr DOTADD expr .)
    LEQ             reduce using rule 43 (expr -> expr DOTADD expr .)
    GEQ             reduce using rule 43 (expr -> expr DOTADD expr .)
    ;               reduce using rule 43 (expr -> expr DOTADD expr .)
    ,               reduce using rule 43 (expr -> expr DOTADD expr .)
    )               reduce using rule 43 (expr -> expr DOTADD expr .)
    :               reduce using rule 43 (expr -> expr DOTADD expr .)
    BREAK           reduce using rule 43 (expr -> expr DOTADD expr .)
    CONTINUE        reduce using rule 43 (expr -> expr DOTADD expr .)
    {               reduce using rule 43 (expr -> expr DOTADD expr .)
    IF              reduce using rule 43 (expr -> expr DOTADD expr .)
    FOR             reduce using rule 43 (expr -> expr DOTADD expr .)
    WHILE           reduce using rule 43 (expr -> expr DOTADD expr .)
    RETURN          reduce using rule 43 (expr -> expr DOTADD expr .)
    PRINT           reduce using rule 43 (expr -> expr DOTADD expr .)
    ID              reduce using rule 43 (expr -> expr DOTADD expr .)
    '               shift and go to state 59
    *               shift and go to state 62
    /               shift and go to state 63
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67

  ! '               [ reduce using rule 43 (expr -> expr DOTADD expr .) ]
  ! *               [ reduce using rule 43 (expr -> expr DOTADD expr .) ]
  ! /               [ reduce using rule 43 (expr -> expr DOTADD expr .) ]
  ! DOTMUL          [ reduce using rule 43 (expr -> expr DOTADD expr .) ]
  ! DOTDIV          [ reduce using rule 43 (expr -> expr DOTADD expr .) ]
  ! +               [ shift and go to state 60 ]
  ! -               [ shift and go to state 61 ]
  ! DOTADD          [ shift and go to state 64 ]
  ! DOTSUB          [ shift and go to state 65 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 97

    (44) expr -> expr DOTSUB expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    +               reduce using rule 44 (expr -> expr DOTSUB expr .)
    -               reduce using rule 44 (expr -> expr DOTSUB expr .)
    DOTADD          reduce using rule 44 (expr -> expr DOTSUB expr .)
    DOTSUB          reduce using rule 44 (expr -> expr DOTSUB expr .)
    >               reduce using rule 44 (expr -> expr DOTSUB expr .)
    <               reduce using rule 44 (expr -> expr DOTSUB expr .)
    EQ              reduce using rule 44 (expr -> expr DOTSUB expr .)
    NEQ             reduce using rule 44 (expr -> expr DOTSUB expr .)
    LEQ             reduce using rule 44 (expr -> expr DOTSUB expr .)
    GEQ             reduce using rule 44 (expr -> expr DOTSUB expr .)
    ;               reduce using rule 44 (expr -> expr DOTSUB expr .)
    ,               reduce using rule 44 (expr -> expr DOTSUB expr .)
    )               reduce using rule 44 (expr -> expr DOTSUB expr .)
    :               reduce using rule 44 (expr -> expr DOTSUB expr .)
    BREAK           reduce using rule 44 (expr -> expr DOTSUB expr .)
    CONTINUE        reduce using rule 44 (expr -> expr DOTSUB expr .)
    {               reduce using rule 44 (expr -> expr DOTSUB expr .)
    IF              reduce using rule 44 (expr -> expr DOTSUB expr .)
    FOR             reduce using rule 44 (expr -> expr DOTSUB expr .)
    WHILE           reduce using rule 44 (expr -> expr DOTSUB expr .)
    RETURN          reduce using rule 44 (expr -> expr DOTSUB expr .)
    PRINT           reduce using rule 44 (expr -> expr DOTSUB expr .)
    ID              reduce using rule 44 (expr -> expr DOTSUB expr .)
    '               shift and go to state 59
    *               shift and go to state 62
    /               shift and go to state 63
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67

  ! '               [ reduce using rule 44 (expr -> expr DOTSUB expr .) ]
  ! *               [ reduce using rule 44 (expr -> expr DOTSUB expr .) ]
  ! /               [ reduce using rule 44 (expr -> expr DOTSUB expr .) ]
  ! DOTMUL          [ reduce using rule 44 (expr -> expr DOTSUB expr .) ]
  ! DOTDIV          [ reduce using rule 44 (expr -> expr DOTSUB expr .) ]
  ! +               [ shift and go to state 60 ]
  ! -               [ shift and go to state 61 ]
  ! DOTADD          [ shift and go to state 64 ]
  ! DOTSUB          [ shift and go to state 65 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 98

    (45) expr -> expr DOTMUL expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    +               reduce using rule 45 (expr -> expr DOTMUL expr .)
    -               reduce using rule 45 (expr -> expr DOTMUL expr .)
    *               reduce using rule 45 (expr -> expr DOTMUL expr .)
    /               reduce using rule 45 (expr -> expr DOTMUL expr .)
    DOTADD          reduce using rule 45 (expr -> expr DOTMUL expr .)
    DOTSUB          reduce using rule 45 (expr -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 45 (expr -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 45 (expr -> expr DOTMUL expr .)
    >               reduce using rule 45 (expr -> expr DOTMUL expr .)
    <               reduce using rule 45 (expr -> expr DOTMUL expr .)
    EQ              reduce using rule 45 (expr -> expr DOTMUL expr .)
    NEQ             reduce using rule 45 (expr -> expr DOTMUL expr .)
    LEQ             reduce using rule 45 (expr -> expr DOTMUL expr .)
    GEQ             reduce using rule 45 (expr -> expr DOTMUL expr .)
    ;               reduce using rule 45 (expr -> expr DOTMUL expr .)
    ,               reduce using rule 45 (expr -> expr DOTMUL expr .)
    )               reduce using rule 45 (expr -> expr DOTMUL expr .)
    :               reduce using rule 45 (expr -> expr DOTMUL expr .)
    BREAK           reduce using rule 45 (expr -> expr DOTMUL expr .)
    CONTINUE        reduce using rule 45 (expr -> expr DOTMUL expr .)
    {               reduce using rule 45 (expr -> expr DOTMUL expr .)
    IF              reduce using rule 45 (expr -> expr DOTMUL expr .)
    FOR             reduce using rule 45 (expr -> expr DOTMUL expr .)
    WHILE           reduce using rule 45 (expr -> expr DOTMUL expr .)
    RETURN          reduce using rule 45 (expr -> expr DOTMUL expr .)
    PRINT           reduce using rule 45 (expr -> expr DOTMUL expr .)
    ID              reduce using rule 45 (expr -> expr DOTMUL expr .)
    '               shift and go to state 59

  ! '               [ reduce using rule 45 (expr -> expr DOTMUL expr .) ]
  ! +               [ shift and go to state 60 ]
  ! -               [ shift and go to state 61 ]
  ! *               [ shift and go to state 62 ]
  ! /               [ shift and go to state 63 ]
  ! DOTADD          [ shift and go to state 64 ]
  ! DOTSUB          [ shift and go to state 65 ]
  ! DOTMUL          [ shift and go to state 66 ]
  ! DOTDIV          [ shift and go to state 67 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 99

    (46) expr -> expr DOTDIV expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    +               reduce using rule 46 (expr -> expr DOTDIV expr .)
    -               reduce using rule 46 (expr -> expr DOTDIV expr .)
    *               reduce using rule 46 (expr -> expr DOTDIV expr .)
    /               reduce using rule 46 (expr -> expr DOTDIV expr .)
    DOTADD          reduce using rule 46 (expr -> expr DOTDIV expr .)
    DOTSUB          reduce using rule 46 (expr -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 46 (expr -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 46 (expr -> expr DOTDIV expr .)
    >               reduce using rule 46 (expr -> expr DOTDIV expr .)
    <               reduce using rule 46 (expr -> expr DOTDIV expr .)
    EQ              reduce using rule 46 (expr -> expr DOTDIV expr .)
    NEQ             reduce using rule 46 (expr -> expr DOTDIV expr .)
    LEQ             reduce using rule 46 (expr -> expr DOTDIV expr .)
    GEQ             reduce using rule 46 (expr -> expr DOTDIV expr .)
    ;               reduce using rule 46 (expr -> expr DOTDIV expr .)
    ,               reduce using rule 46 (expr -> expr DOTDIV expr .)
    )               reduce using rule 46 (expr -> expr DOTDIV expr .)
    :               reduce using rule 46 (expr -> expr DOTDIV expr .)
    BREAK           reduce using rule 46 (expr -> expr DOTDIV expr .)
    CONTINUE        reduce using rule 46 (expr -> expr DOTDIV expr .)
    {               reduce using rule 46 (expr -> expr DOTDIV expr .)
    IF              reduce using rule 46 (expr -> expr DOTDIV expr .)
    FOR             reduce using rule 46 (expr -> expr DOTDIV expr .)
    WHILE           reduce using rule 46 (expr -> expr DOTDIV expr .)
    RETURN          reduce using rule 46 (expr -> expr DOTDIV expr .)
    PRINT           reduce using rule 46 (expr -> expr DOTDIV expr .)
    ID              reduce using rule 46 (expr -> expr DOTDIV expr .)
    '               shift and go to state 59

  ! '               [ reduce using rule 46 (expr -> expr DOTDIV expr .) ]
  ! +               [ shift and go to state 60 ]
  ! -               [ shift and go to state 61 ]
  ! *               [ shift and go to state 62 ]
  ! /               [ shift and go to state 63 ]
  ! DOTADD          [ shift and go to state 64 ]
  ! DOTSUB          [ shift and go to state 65 ]
  ! DOTMUL          [ shift and go to state 66 ]
  ! DOTDIV          [ shift and go to state 67 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 100

    (47) expr -> expr > expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    >               reduce using rule 47 (expr -> expr > expr .)
    <               reduce using rule 47 (expr -> expr > expr .)
    EQ              reduce using rule 47 (expr -> expr > expr .)
    NEQ             reduce using rule 47 (expr -> expr > expr .)
    LEQ             reduce using rule 47 (expr -> expr > expr .)
    GEQ             reduce using rule 47 (expr -> expr > expr .)
    ;               reduce using rule 47 (expr -> expr > expr .)
    ,               reduce using rule 47 (expr -> expr > expr .)
    )               reduce using rule 47 (expr -> expr > expr .)
    :               reduce using rule 47 (expr -> expr > expr .)
    BREAK           reduce using rule 47 (expr -> expr > expr .)
    CONTINUE        reduce using rule 47 (expr -> expr > expr .)
    {               reduce using rule 47 (expr -> expr > expr .)
    IF              reduce using rule 47 (expr -> expr > expr .)
    FOR             reduce using rule 47 (expr -> expr > expr .)
    WHILE           reduce using rule 47 (expr -> expr > expr .)
    RETURN          reduce using rule 47 (expr -> expr > expr .)
    PRINT           reduce using rule 47 (expr -> expr > expr .)
    ID              reduce using rule 47 (expr -> expr > expr .)
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67

  ! '               [ reduce using rule 47 (expr -> expr > expr .) ]
  ! +               [ reduce using rule 47 (expr -> expr > expr .) ]
  ! -               [ reduce using rule 47 (expr -> expr > expr .) ]
  ! *               [ reduce using rule 47 (expr -> expr > expr .) ]
  ! /               [ reduce using rule 47 (expr -> expr > expr .) ]
  ! DOTADD          [ reduce using rule 47 (expr -> expr > expr .) ]
  ! DOTSUB          [ reduce using rule 47 (expr -> expr > expr .) ]
  ! DOTMUL          [ reduce using rule 47 (expr -> expr > expr .) ]
  ! DOTDIV          [ reduce using rule 47 (expr -> expr > expr .) ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 101

    (48) expr -> expr < expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    >               reduce using rule 48 (expr -> expr < expr .)
    <               reduce using rule 48 (expr -> expr < expr .)
    EQ              reduce using rule 48 (expr -> expr < expr .)
    NEQ             reduce using rule 48 (expr -> expr < expr .)
    LEQ             reduce using rule 48 (expr -> expr < expr .)
    GEQ             reduce using rule 48 (expr -> expr < expr .)
    ;               reduce using rule 48 (expr -> expr < expr .)
    ,               reduce using rule 48 (expr -> expr < expr .)
    )               reduce using rule 48 (expr -> expr < expr .)
    :               reduce using rule 48 (expr -> expr < expr .)
    BREAK           reduce using rule 48 (expr -> expr < expr .)
    CONTINUE        reduce using rule 48 (expr -> expr < expr .)
    {               reduce using rule 48 (expr -> expr < expr .)
    IF              reduce using rule 48 (expr -> expr < expr .)
    FOR             reduce using rule 48 (expr -> expr < expr .)
    WHILE           reduce using rule 48 (expr -> expr < expr .)
    RETURN          reduce using rule 48 (expr -> expr < expr .)
    PRINT           reduce using rule 48 (expr -> expr < expr .)
    ID              reduce using rule 48 (expr -> expr < expr .)
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67

  ! '               [ reduce using rule 48 (expr -> expr < expr .) ]
  ! +               [ reduce using rule 48 (expr -> expr < expr .) ]
  ! -               [ reduce using rule 48 (expr -> expr < expr .) ]
  ! *               [ reduce using rule 48 (expr -> expr < expr .) ]
  ! /               [ reduce using rule 48 (expr -> expr < expr .) ]
  ! DOTADD          [ reduce using rule 48 (expr -> expr < expr .) ]
  ! DOTSUB          [ reduce using rule 48 (expr -> expr < expr .) ]
  ! DOTMUL          [ reduce using rule 48 (expr -> expr < expr .) ]
  ! DOTDIV          [ reduce using rule 48 (expr -> expr < expr .) ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 102

    (49) expr -> expr EQ expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    >               reduce using rule 49 (expr -> expr EQ expr .)
    <               reduce using rule 49 (expr -> expr EQ expr .)
    EQ              reduce using rule 49 (expr -> expr EQ expr .)
    NEQ             reduce using rule 49 (expr -> expr EQ expr .)
    LEQ             reduce using rule 49 (expr -> expr EQ expr .)
    GEQ             reduce using rule 49 (expr -> expr EQ expr .)
    ;               reduce using rule 49 (expr -> expr EQ expr .)
    ,               reduce using rule 49 (expr -> expr EQ expr .)
    )               reduce using rule 49 (expr -> expr EQ expr .)
    :               reduce using rule 49 (expr -> expr EQ expr .)
    BREAK           reduce using rule 49 (expr -> expr EQ expr .)
    CONTINUE        reduce using rule 49 (expr -> expr EQ expr .)
    {               reduce using rule 49 (expr -> expr EQ expr .)
    IF              reduce using rule 49 (expr -> expr EQ expr .)
    FOR             reduce using rule 49 (expr -> expr EQ expr .)
    WHILE           reduce using rule 49 (expr -> expr EQ expr .)
    RETURN          reduce using rule 49 (expr -> expr EQ expr .)
    PRINT           reduce using rule 49 (expr -> expr EQ expr .)
    ID              reduce using rule 49 (expr -> expr EQ expr .)
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67

  ! '               [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! +               [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! -               [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! *               [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! /               [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! DOTADD          [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! DOTSUB          [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! DOTMUL          [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! DOTDIV          [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 103

    (50) expr -> expr NEQ expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    >               reduce using rule 50 (expr -> expr NEQ expr .)
    <               reduce using rule 50 (expr -> expr NEQ expr .)
    EQ              reduce using rule 50 (expr -> expr NEQ expr .)
    NEQ             reduce using rule 50 (expr -> expr NEQ expr .)
    LEQ             reduce using rule 50 (expr -> expr NEQ expr .)
    GEQ             reduce using rule 50 (expr -> expr NEQ expr .)
    ;               reduce using rule 50 (expr -> expr NEQ expr .)
    ,               reduce using rule 50 (expr -> expr NEQ expr .)
    )               reduce using rule 50 (expr -> expr NEQ expr .)
    :               reduce using rule 50 (expr -> expr NEQ expr .)
    BREAK           reduce using rule 50 (expr -> expr NEQ expr .)
    CONTINUE        reduce using rule 50 (expr -> expr NEQ expr .)
    {               reduce using rule 50 (expr -> expr NEQ expr .)
    IF              reduce using rule 50 (expr -> expr NEQ expr .)
    FOR             reduce using rule 50 (expr -> expr NEQ expr .)
    WHILE           reduce using rule 50 (expr -> expr NEQ expr .)
    RETURN          reduce using rule 50 (expr -> expr NEQ expr .)
    PRINT           reduce using rule 50 (expr -> expr NEQ expr .)
    ID              reduce using rule 50 (expr -> expr NEQ expr .)
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67

  ! '               [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! +               [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! -               [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! *               [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! /               [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! DOTADD          [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! DOTSUB          [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! DOTMUL          [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! DOTDIV          [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 104

    (51) expr -> expr LEQ expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    >               reduce using rule 51 (expr -> expr LEQ expr .)
    <               reduce using rule 51 (expr -> expr LEQ expr .)
    EQ              reduce using rule 51 (expr -> expr LEQ expr .)
    NEQ             reduce using rule 51 (expr -> expr LEQ expr .)
    LEQ             reduce using rule 51 (expr -> expr LEQ expr .)
    GEQ             reduce using rule 51 (expr -> expr LEQ expr .)
    ;               reduce using rule 51 (expr -> expr LEQ expr .)
    ,               reduce using rule 51 (expr -> expr LEQ expr .)
    )               reduce using rule 51 (expr -> expr LEQ expr .)
    :               reduce using rule 51 (expr -> expr LEQ expr .)
    BREAK           reduce using rule 51 (expr -> expr LEQ expr .)
    CONTINUE        reduce using rule 51 (expr -> expr LEQ expr .)
    {               reduce using rule 51 (expr -> expr LEQ expr .)
    IF              reduce using rule 51 (expr -> expr LEQ expr .)
    FOR             reduce using rule 51 (expr -> expr LEQ expr .)
    WHILE           reduce using rule 51 (expr -> expr LEQ expr .)
    RETURN          reduce using rule 51 (expr -> expr LEQ expr .)
    PRINT           reduce using rule 51 (expr -> expr LEQ expr .)
    ID              reduce using rule 51 (expr -> expr LEQ expr .)
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67

  ! '               [ reduce using rule 51 (expr -> expr LEQ expr .) ]
  ! +               [ reduce using rule 51 (expr -> expr LEQ expr .) ]
  ! -               [ reduce using rule 51 (expr -> expr LEQ expr .) ]
  ! *               [ reduce using rule 51 (expr -> expr LEQ expr .) ]
  ! /               [ reduce using rule 51 (expr -> expr LEQ expr .) ]
  ! DOTADD          [ reduce using rule 51 (expr -> expr LEQ expr .) ]
  ! DOTSUB          [ reduce using rule 51 (expr -> expr LEQ expr .) ]
  ! DOTMUL          [ reduce using rule 51 (expr -> expr LEQ expr .) ]
  ! DOTDIV          [ reduce using rule 51 (expr -> expr LEQ expr .) ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 105

    (52) expr -> expr GEQ expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    >               reduce using rule 52 (expr -> expr GEQ expr .)
    <               reduce using rule 52 (expr -> expr GEQ expr .)
    EQ              reduce using rule 52 (expr -> expr GEQ expr .)
    NEQ             reduce using rule 52 (expr -> expr GEQ expr .)
    LEQ             reduce using rule 52 (expr -> expr GEQ expr .)
    GEQ             reduce using rule 52 (expr -> expr GEQ expr .)
    ;               reduce using rule 52 (expr -> expr GEQ expr .)
    ,               reduce using rule 52 (expr -> expr GEQ expr .)
    )               reduce using rule 52 (expr -> expr GEQ expr .)
    :               reduce using rule 52 (expr -> expr GEQ expr .)
    BREAK           reduce using rule 52 (expr -> expr GEQ expr .)
    CONTINUE        reduce using rule 52 (expr -> expr GEQ expr .)
    {               reduce using rule 52 (expr -> expr GEQ expr .)
    IF              reduce using rule 52 (expr -> expr GEQ expr .)
    FOR             reduce using rule 52 (expr -> expr GEQ expr .)
    WHILE           reduce using rule 52 (expr -> expr GEQ expr .)
    RETURN          reduce using rule 52 (expr -> expr GEQ expr .)
    PRINT           reduce using rule 52 (expr -> expr GEQ expr .)
    ID              reduce using rule 52 (expr -> expr GEQ expr .)
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67

  ! '               [ reduce using rule 52 (expr -> expr GEQ expr .) ]
  ! +               [ reduce using rule 52 (expr -> expr GEQ expr .) ]
  ! -               [ reduce using rule 52 (expr -> expr GEQ expr .) ]
  ! *               [ reduce using rule 52 (expr -> expr GEQ expr .) ]
  ! /               [ reduce using rule 52 (expr -> expr GEQ expr .) ]
  ! DOTADD          [ reduce using rule 52 (expr -> expr GEQ expr .) ]
  ! DOTSUB          [ reduce using rule 52 (expr -> expr GEQ expr .) ]
  ! DOTMUL          [ reduce using rule 52 (expr -> expr GEQ expr .) ]
  ! DOTDIV          [ reduce using rule 52 (expr -> expr GEQ expr .) ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 71 ]
  ! LEQ             [ shift and go to state 72 ]
  ! GEQ             [ shift and go to state 73 ]


state 106

    (35) expr -> matrix_function ( expr . )
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    )               shift and go to state 121
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67
    >               shift and go to state 68
    <               shift and go to state 69
    EQ              shift and go to state 70
    NEQ             shift and go to state 71
    LEQ             shift and go to state 72
    GEQ             shift and go to state 73


state 107

    (38) expr -> ( expr ) .

    '               reduce using rule 38 (expr -> ( expr ) .)
    +               reduce using rule 38 (expr -> ( expr ) .)
    -               reduce using rule 38 (expr -> ( expr ) .)
    *               reduce using rule 38 (expr -> ( expr ) .)
    /               reduce using rule 38 (expr -> ( expr ) .)
    DOTADD          reduce using rule 38 (expr -> ( expr ) .)
    DOTSUB          reduce using rule 38 (expr -> ( expr ) .)
    DOTMUL          reduce using rule 38 (expr -> ( expr ) .)
    DOTDIV          reduce using rule 38 (expr -> ( expr ) .)
    >               reduce using rule 38 (expr -> ( expr ) .)
    <               reduce using rule 38 (expr -> ( expr ) .)
    EQ              reduce using rule 38 (expr -> ( expr ) .)
    NEQ             reduce using rule 38 (expr -> ( expr ) .)
    LEQ             reduce using rule 38 (expr -> ( expr ) .)
    GEQ             reduce using rule 38 (expr -> ( expr ) .)
    ;               reduce using rule 38 (expr -> ( expr ) .)
    ,               reduce using rule 38 (expr -> ( expr ) .)
    )               reduce using rule 38 (expr -> ( expr ) .)
    :               reduce using rule 38 (expr -> ( expr ) .)
    BREAK           reduce using rule 38 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 38 (expr -> ( expr ) .)
    {               reduce using rule 38 (expr -> ( expr ) .)
    IF              reduce using rule 38 (expr -> ( expr ) .)
    FOR             reduce using rule 38 (expr -> ( expr ) .)
    WHILE           reduce using rule 38 (expr -> ( expr ) .)
    RETURN          reduce using rule 38 (expr -> ( expr ) .)
    PRINT           reduce using rule 38 (expr -> ( expr ) .)
    ID              reduce using rule 38 (expr -> ( expr ) .)


state 108

    (64) vector -> [ variables . ]
    (65) variables -> variables . , variable

    ]               shift and go to state 122
    ,               shift and go to state 123


state 109

    (66) variables -> variable .

    ]               reduce using rule 66 (variables -> variable .)
    ,               reduce using rule 66 (variables -> variable .)


state 110

    (67) variable -> INTNUM .

    ]               reduce using rule 67 (variable -> INTNUM .)
    ,               reduce using rule 67 (variable -> INTNUM .)


state 111

    (68) variable -> FLOAT .

    ]               reduce using rule 68 (variable -> FLOAT .)
    ,               reduce using rule 68 (variable -> FLOAT .)


state 112

    (69) variable -> assignable .

    ]               reduce using rule 69 (variable -> assignable .)
    ,               reduce using rule 69 (variable -> assignable .)


state 113

    (61) matrix -> [ vectors ] .

    '               reduce using rule 61 (matrix -> [ vectors ] .)
    +               reduce using rule 61 (matrix -> [ vectors ] .)
    -               reduce using rule 61 (matrix -> [ vectors ] .)
    *               reduce using rule 61 (matrix -> [ vectors ] .)
    /               reduce using rule 61 (matrix -> [ vectors ] .)
    DOTADD          reduce using rule 61 (matrix -> [ vectors ] .)
    DOTSUB          reduce using rule 61 (matrix -> [ vectors ] .)
    DOTMUL          reduce using rule 61 (matrix -> [ vectors ] .)
    DOTDIV          reduce using rule 61 (matrix -> [ vectors ] .)
    >               reduce using rule 61 (matrix -> [ vectors ] .)
    <               reduce using rule 61 (matrix -> [ vectors ] .)
    EQ              reduce using rule 61 (matrix -> [ vectors ] .)
    NEQ             reduce using rule 61 (matrix -> [ vectors ] .)
    LEQ             reduce using rule 61 (matrix -> [ vectors ] .)
    GEQ             reduce using rule 61 (matrix -> [ vectors ] .)
    ;               reduce using rule 61 (matrix -> [ vectors ] .)
    ,               reduce using rule 61 (matrix -> [ vectors ] .)
    )               reduce using rule 61 (matrix -> [ vectors ] .)
    :               reduce using rule 61 (matrix -> [ vectors ] .)
    BREAK           reduce using rule 61 (matrix -> [ vectors ] .)
    CONTINUE        reduce using rule 61 (matrix -> [ vectors ] .)
    {               reduce using rule 61 (matrix -> [ vectors ] .)
    IF              reduce using rule 61 (matrix -> [ vectors ] .)
    FOR             reduce using rule 61 (matrix -> [ vectors ] .)
    WHILE           reduce using rule 61 (matrix -> [ vectors ] .)
    RETURN          reduce using rule 61 (matrix -> [ vectors ] .)
    PRINT           reduce using rule 61 (matrix -> [ vectors ] .)
    ID              reduce using rule 61 (matrix -> [ vectors ] .)


state 114

    (62) vectors -> vectors , . vector
    (64) vector -> . [ variables ]

    [               shift and go to state 77

    vector                         shift and go to state 124

state 115

    (18) printables -> printables , printable .

    ,               reduce using rule 18 (printables -> printables , printable .)
    ;               reduce using rule 18 (printables -> printables , printable .)


state 116

    (56) instruction_if -> IF ( expr ) instruction .
    (57) instruction_if -> IF ( expr ) instruction . ELSE instruction

    BREAK           reduce using rule 56 (instruction_if -> IF ( expr ) instruction .)
    CONTINUE        reduce using rule 56 (instruction_if -> IF ( expr ) instruction .)
    {               reduce using rule 56 (instruction_if -> IF ( expr ) instruction .)
    IF              reduce using rule 56 (instruction_if -> IF ( expr ) instruction .)
    FOR             reduce using rule 56 (instruction_if -> IF ( expr ) instruction .)
    WHILE           reduce using rule 56 (instruction_if -> IF ( expr ) instruction .)
    RETURN          reduce using rule 56 (instruction_if -> IF ( expr ) instruction .)
    PRINT           reduce using rule 56 (instruction_if -> IF ( expr ) instruction .)
    ID              reduce using rule 56 (instruction_if -> IF ( expr ) instruction .)
    $end            reduce using rule 56 (instruction_if -> IF ( expr ) instruction .)
    }               reduce using rule 56 (instruction_if -> IF ( expr ) instruction .)
    ELSE            shift and go to state 125

  ! ELSE            [ reduce using rule 56 (instruction_if -> IF ( expr ) instruction .) ]


state 117

    (58) instruction_for -> FOR ID = range instruction .

    BREAK           reduce using rule 58 (instruction_for -> FOR ID = range instruction .)
    CONTINUE        reduce using rule 58 (instruction_for -> FOR ID = range instruction .)
    {               reduce using rule 58 (instruction_for -> FOR ID = range instruction .)
    IF              reduce using rule 58 (instruction_for -> FOR ID = range instruction .)
    FOR             reduce using rule 58 (instruction_for -> FOR ID = range instruction .)
    WHILE           reduce using rule 58 (instruction_for -> FOR ID = range instruction .)
    RETURN          reduce using rule 58 (instruction_for -> FOR ID = range instruction .)
    PRINT           reduce using rule 58 (instruction_for -> FOR ID = range instruction .)
    ID              reduce using rule 58 (instruction_for -> FOR ID = range instruction .)
    $end            reduce using rule 58 (instruction_for -> FOR ID = range instruction .)
    }               reduce using rule 58 (instruction_for -> FOR ID = range instruction .)
    ELSE            reduce using rule 58 (instruction_for -> FOR ID = range instruction .)


state 118

    (60) range -> expr : . expr
    (31) expr -> . assignable
    (32) expr -> . INTNUM
    (33) expr -> . FLOAT
    (34) expr -> . matrix
    (35) expr -> . matrix_function ( expr )
    (36) expr -> . - expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . expr + expr
    (40) expr -> . expr - expr
    (41) expr -> . expr * expr
    (42) expr -> . expr / expr
    (43) expr -> . expr DOTADD expr
    (44) expr -> . expr DOTSUB expr
    (45) expr -> . expr DOTMUL expr
    (46) expr -> . expr DOTDIV expr
    (47) expr -> . expr > expr
    (48) expr -> . expr < expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr LEQ expr
    (52) expr -> . expr GEQ expr
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (61) matrix -> . [ vectors ]
    (53) matrix_function -> . ZEROS
    (54) matrix_function -> . ONES
    (55) matrix_function -> . EYE
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 35
    FLOAT           shift and go to state 36
    -               shift and go to state 40
    (               shift and go to state 39
    ID              shift and go to state 15
    [               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44

    expr                           shift and go to state 126
    assignable                     shift and go to state 34
    matrix                         shift and go to state 37
    matrix_function                shift and go to state 38
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 119

    (29) matrix_element -> ID [ INTNUM , INTNUM . ]

    ]               shift and go to state 127


state 120

    (59) instruction_while -> WHILE ( expr ) instruction .

    BREAK           reduce using rule 59 (instruction_while -> WHILE ( expr ) instruction .)
    CONTINUE        reduce using rule 59 (instruction_while -> WHILE ( expr ) instruction .)
    {               reduce using rule 59 (instruction_while -> WHILE ( expr ) instruction .)
    IF              reduce using rule 59 (instruction_while -> WHILE ( expr ) instruction .)
    FOR             reduce using rule 59 (instruction_while -> WHILE ( expr ) instruction .)
    WHILE           reduce using rule 59 (instruction_while -> WHILE ( expr ) instruction .)
    RETURN          reduce using rule 59 (instruction_while -> WHILE ( expr ) instruction .)
    PRINT           reduce using rule 59 (instruction_while -> WHILE ( expr ) instruction .)
    ID              reduce using rule 59 (instruction_while -> WHILE ( expr ) instruction .)
    $end            reduce using rule 59 (instruction_while -> WHILE ( expr ) instruction .)
    }               reduce using rule 59 (instruction_while -> WHILE ( expr ) instruction .)
    ELSE            reduce using rule 59 (instruction_while -> WHILE ( expr ) instruction .)


state 121

    (35) expr -> matrix_function ( expr ) .

    '               reduce using rule 35 (expr -> matrix_function ( expr ) .)
    +               reduce using rule 35 (expr -> matrix_function ( expr ) .)
    -               reduce using rule 35 (expr -> matrix_function ( expr ) .)
    *               reduce using rule 35 (expr -> matrix_function ( expr ) .)
    /               reduce using rule 35 (expr -> matrix_function ( expr ) .)
    DOTADD          reduce using rule 35 (expr -> matrix_function ( expr ) .)
    DOTSUB          reduce using rule 35 (expr -> matrix_function ( expr ) .)
    DOTMUL          reduce using rule 35 (expr -> matrix_function ( expr ) .)
    DOTDIV          reduce using rule 35 (expr -> matrix_function ( expr ) .)
    >               reduce using rule 35 (expr -> matrix_function ( expr ) .)
    <               reduce using rule 35 (expr -> matrix_function ( expr ) .)
    EQ              reduce using rule 35 (expr -> matrix_function ( expr ) .)
    NEQ             reduce using rule 35 (expr -> matrix_function ( expr ) .)
    LEQ             reduce using rule 35 (expr -> matrix_function ( expr ) .)
    GEQ             reduce using rule 35 (expr -> matrix_function ( expr ) .)
    ;               reduce using rule 35 (expr -> matrix_function ( expr ) .)
    ,               reduce using rule 35 (expr -> matrix_function ( expr ) .)
    )               reduce using rule 35 (expr -> matrix_function ( expr ) .)
    :               reduce using rule 35 (expr -> matrix_function ( expr ) .)
    BREAK           reduce using rule 35 (expr -> matrix_function ( expr ) .)
    CONTINUE        reduce using rule 35 (expr -> matrix_function ( expr ) .)
    {               reduce using rule 35 (expr -> matrix_function ( expr ) .)
    IF              reduce using rule 35 (expr -> matrix_function ( expr ) .)
    FOR             reduce using rule 35 (expr -> matrix_function ( expr ) .)
    WHILE           reduce using rule 35 (expr -> matrix_function ( expr ) .)
    RETURN          reduce using rule 35 (expr -> matrix_function ( expr ) .)
    PRINT           reduce using rule 35 (expr -> matrix_function ( expr ) .)
    ID              reduce using rule 35 (expr -> matrix_function ( expr ) .)


state 122

    (64) vector -> [ variables ] .

    ]               reduce using rule 64 (vector -> [ variables ] .)
    ,               reduce using rule 64 (vector -> [ variables ] .)


state 123

    (65) variables -> variables , . variable
    (67) variable -> . INTNUM
    (68) variable -> . FLOAT
    (69) variable -> . assignable
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 110
    FLOAT           shift and go to state 111
    ID              shift and go to state 15

    variable                       shift and go to state 128
    assignable                     shift and go to state 112
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 124

    (62) vectors -> vectors , vector .

    ]               reduce using rule 62 (vectors -> vectors , vector .)
    ,               reduce using rule 62 (vectors -> vectors , vector .)


state 125

    (57) instruction_if -> IF ( expr ) instruction ELSE . instruction
    (5) instruction -> . instruction_if
    (6) instruction -> . instruction_for
    (7) instruction -> . instruction_while
    (8) instruction -> . instruction_return ;
    (9) instruction -> . instruction_assign ;
    (10) instruction -> . instruction_print ;
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . { instructions }
    (56) instruction_if -> . IF ( expr ) instruction
    (57) instruction_if -> . IF ( expr ) instruction ELSE instruction
    (58) instruction_for -> . FOR ID = range instruction
    (59) instruction_while -> . WHILE ( expr ) instruction
    (14) instruction_return -> . RETURN
    (15) instruction_return -> . RETURN expr
    (21) instruction_assign -> . assignable = expr
    (22) instruction_assign -> . assignable ADDASSIGN expr
    (23) instruction_assign -> . assignable SUBASSIGN expr
    (24) instruction_assign -> . assignable MULASSIGN expr
    (25) instruction_assign -> . assignable DIVASSIGN expr
    (16) instruction_print -> . PRINT printables
    (26) assignable -> . ID
    (27) assignable -> . matrix_element
    (28) assignable -> . vector_element
    (29) matrix_element -> . ID [ INTNUM , INTNUM ]
    (30) vector_element -> . ID [ INTNUM ]

    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    ID              shift and go to state 15

    instruction                    shift and go to state 129
    instruction_if                 shift and go to state 4
    instruction_for                shift and go to state 5
    instruction_while              shift and go to state 6
    instruction_return             shift and go to state 7
    instruction_assign             shift and go to state 8
    instruction_print              shift and go to state 9
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 20
    vector_element                 shift and go to state 21

state 126

    (60) range -> expr : expr .
    (37) expr -> expr . '
    (39) expr -> expr . + expr
    (40) expr -> expr . - expr
    (41) expr -> expr . * expr
    (42) expr -> expr . / expr
    (43) expr -> expr . DOTADD expr
    (44) expr -> expr . DOTSUB expr
    (45) expr -> expr . DOTMUL expr
    (46) expr -> expr . DOTDIV expr
    (47) expr -> expr . > expr
    (48) expr -> expr . < expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . LEQ expr
    (52) expr -> expr . GEQ expr

    BREAK           reduce using rule 60 (range -> expr : expr .)
    CONTINUE        reduce using rule 60 (range -> expr : expr .)
    {               reduce using rule 60 (range -> expr : expr .)
    IF              reduce using rule 60 (range -> expr : expr .)
    FOR             reduce using rule 60 (range -> expr : expr .)
    WHILE           reduce using rule 60 (range -> expr : expr .)
    RETURN          reduce using rule 60 (range -> expr : expr .)
    PRINT           reduce using rule 60 (range -> expr : expr .)
    ID              reduce using rule 60 (range -> expr : expr .)
    '               shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63
    DOTADD          shift and go to state 64
    DOTSUB          shift and go to state 65
    DOTMUL          shift and go to state 66
    DOTDIV          shift and go to state 67
    >               shift and go to state 68
    <               shift and go to state 69
    EQ              shift and go to state 70
    NEQ             shift and go to state 71
    LEQ             shift and go to state 72
    GEQ             shift and go to state 73


state 127

    (29) matrix_element -> ID [ INTNUM , INTNUM ] .

    =               reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ADDASSIGN       reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    SUBASSIGN       reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    MULASSIGN       reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DIVASSIGN       reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    '               reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    +               reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    -               reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    *               reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    /               reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTADD          reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTSUB          reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTMUL          reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTDIV          reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    >               reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    <               reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    EQ              reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    NEQ             reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    LEQ             reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    GEQ             reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ;               reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ,               reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    )               reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    :               reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    BREAK           reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    CONTINUE        reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    {               reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    IF              reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    FOR             reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    WHILE           reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    RETURN          reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    PRINT           reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ID              reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ]               reduce using rule 29 (matrix_element -> ID [ INTNUM , INTNUM ] .)


state 128

    (65) variables -> variables , variable .

    ]               reduce using rule 65 (variables -> variables , variable .)
    ,               reduce using rule 65 (variables -> variables , variable .)


state 129

    (57) instruction_if -> IF ( expr ) instruction ELSE instruction .

    BREAK           reduce using rule 57 (instruction_if -> IF ( expr ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 57 (instruction_if -> IF ( expr ) instruction ELSE instruction .)
    {               reduce using rule 57 (instruction_if -> IF ( expr ) instruction ELSE instruction .)
    IF              reduce using rule 57 (instruction_if -> IF ( expr ) instruction ELSE instruction .)
    FOR             reduce using rule 57 (instruction_if -> IF ( expr ) instruction ELSE instruction .)
    WHILE           reduce using rule 57 (instruction_if -> IF ( expr ) instruction ELSE instruction .)
    RETURN          reduce using rule 57 (instruction_if -> IF ( expr ) instruction ELSE instruction .)
    PRINT           reduce using rule 57 (instruction_if -> IF ( expr ) instruction ELSE instruction .)
    ID              reduce using rule 57 (instruction_if -> IF ( expr ) instruction ELSE instruction .)
    $end            reduce using rule 57 (instruction_if -> IF ( expr ) instruction ELSE instruction .)
    }               reduce using rule 57 (instruction_if -> IF ( expr ) instruction ELSE instruction .)
    ELSE            reduce using rule 57 (instruction_if -> IF ( expr ) instruction ELSE instruction .)

